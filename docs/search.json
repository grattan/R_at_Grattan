[{"path":"index.html","id":"welcome","chapter":"Welcome!","heading":"Welcome!","text":"guide designed everyone uses - like use - R Grattan Institute.goal guide make easy - even fun! - use R Grattan, whether ’re analysis reviewing someone else’s analysis.guide two main things:Sets guidelines good practices using R Grattan.Shows use R undertake analytical tasks ’re likely undertake Grattan.guide using R, website helpful incomplete. can’t possibly cover - anticipate - skills might need know. make end guide want learn , start reading R Data Science Hadley Wickham Garrett Grolemund. ’s free, good.guide intended everyone uses R Grattan, may material basic experienced users, material goes heads beginners. ’s OK - just skip bits now.complaints comments guide can sent James, respectively.site written R RMarkdown bookdown package.","code":""},{"path":"introduction-to-r.html","id":"introduction-to-r","chapter":"1 Introduction to R","heading":"1 Introduction to R","text":"people reading guide know R . don’t - ’s OK!used R comfortable enough , might want skip next page. page intended people unfamiliar R. Soon, !","code":""},{"path":"introduction-to-r.html","id":"what-is-r","chapter":"1 Introduction to R","heading":"1.1 What is R?","text":"R programming language. sounds scarier really ! Don’t freak . R software use work data, just like Excel, Stata, SPSS.R available Windows, macOS Linux. One R’s best features: ’s free!One R’s strengths designed statisticians, data scientists, people work data. can also one weaknesses - statisticians aren’t always best designing software ’s easy use box.R lot common statistical software like SAS, Stata, SPSS Eviews. can use software packages read data, manipulate , generate summary statistics, estimate models, . can use R things . Everything can Excel, can (generally !) R. (See next page usually use R rather Excel.)interact R writing code. little different Stata SPSS (Excel), allow least part analyses clicking menus buttons. means initial learning curve R can little steeper something like SPSS, great benefits code-based approach data analysis (see next page ).R quite old, first released publicly 1995, ’s also growing changing rapidly. lot developments R come form new add-pieces software - known ‘packages’ - extend R’s functionality way. cover packages later page.analyse data R, typically write text file containing code. file - ’ll call script - able read executed R start finish. script like recipe cookbook - tells R steps needed go raw ingredients (data) finished product (graphs finished product).easiest way write code, run script, generate outputs (whether ’s chart, document, set model results) use RStudio.","code":""},{"path":"introduction-to-r.html","id":"what-is-rstudio","chapter":"1 Introduction to R","heading":"1.2 What is RStudio?","text":"RStudio another piece free software can download run computer.1 Like R , RStudio available Windows, macOS Linux.programmer jargon, RStudio “integrated development environment” IDE. Translated English, means RStudio range tools help work R. text editor write R scripts, R ‘console’ interact directly language, panes let see objects stored memory graphs ’ve created, among things.’ll almost always interact R opening RStudio.","code":""},{"path":"introduction-to-r.html","id":"installing-r-and-rstudio","chapter":"1 Introduction to R","heading":"1.3 Installing R and RStudio","text":"Although ’ll usually work R opening RStudio, need install R RStudio separately.Install R going CRAN, Comprehensive R Archive Network. CRAN community-run website houses R well broad range R packages.want download latest base R release, ‘binary.’ Don’t worry, don’t need know binary .Windows, ’ll need click ‘base’ version, click start download.’ve installed R, ’ll need install RStudio. Go RStudio website install latest version RStudio Desktop (open source license).’re installed, get started opening RStudio.","code":""},{"path":"introduction-to-r.html","id":"learning-more-about-r","chapter":"1 Introduction to R","heading":"1.4 Learning more about R","text":"guide show use R Grattan. comprehensive tool learning R. book R Data Science Garrett Grolemund Hadley Wickham great resource help go beginner able real-world analysis. book available free online. ’s even active R Data Science community online shares tips solutions R problems.","code":""},{"path":"introduction-to-r.html","id":"r_at_grattan","chapter":"1 Introduction to R","heading":"1.5 #r_at_grattan","text":"great way learn R ask Grattan person! Pose question #r_at_grattan channel Grattan Slack someone sure answer .Grattan, none us programmer first foremost. ’re motley crew economists, lawyers, doctors, scientists philosophers learned code can work data. Don’t feel bad don’t know ’re yet – ’ve happy help get speed.","code":""},{"path":"why-use-r.html","id":"why-use-r","chapter":"2 Why use R?","heading":"2 Why use R?","text":"can break question two parts:use script-based software analyse data?use R, specifically?","code":""},{"path":"why-use-r.html","id":"why-script","chapter":"2 Why use R?","heading":"2.1 Why use script-based software?","text":"’s important analyses reproducible. means steps taken go raw data final outputs clearly set can reproduced necessary.Reproducibility important quality control (“QC”), particularly complex analyses - ’s clear ’ve done, ’s hard someone check work. also makes things easier future - coming back old analysis months years track much easier ’s reproducible. Grattan, us rotate program program periodically – colleagues probably need revisit work point future, ’ll thank ’s reproducible script.Script-based analyses likely reproducible.2 script sets steps taken reading data, tidying , estimating models summary statistics generating output.Analysis isn’t script based, like work done Excel, almost never reproducible. generally unclear steps taken, order, go raw data output. isn’t even always clear spreadsheet ‘raw data’ modified way.Using scripts makes us less susceptible sort errors famously made economists Reinhart Rogoff Excel-based analysis effect public debt economic growth. ’s still quite possible make errors script-based analysis, errors easier find analysis transparent.Script-based analysis software also allows us :Work larger data sets;Work data broader range formats;Easily combine different data sets;Automate tasks build previous analyses; andEstimate broad range statistical models.","code":""},{"path":"why-use-r.html","id":"why-R","chapter":"2 Why use R?","heading":"2.2 Why use R specifically?","text":"reproducible, script-based, research doesn’t necessarily involve using R. ’s perfectly possible reproducible work Stata Python (though somewhat harder SPSS, data often manipulated clicking things).use R specifically :’s free!’s open source.’s powerful, particularly comes statistics data science.’s flexible customisable.active community extending capabilities time providing support online.can used make publication-quality graphs.’s becoming norm academic research common corporate world.","code":""},{"path":"organising-projects.html","id":"organising-projects","chapter":"3 Organising an R project at Grattan","heading":"3 Organising an R project at Grattan","text":"work Grattan, whether ’s R software, heed “hit bus” rule. ’re around, colleagues able access, understand, verify, build work ’ve done.Organising analysis predictable, consistent way helps make work reproducible others, including future. really important! analysis messy, ’re likely make errors, less likely spot . people find hard check analysis ’ll find harder return track.page sets guidelines organising work R Grattan. covers:Using RStudio projects relative filepaths;Using consistent subfolder structure; andNaming scripts keeping manageable.Using consistent coding style also helps make work shareable; ’s covered next page.","code":""},{"path":"organising-projects.html","id":"rproj","chapter":"3 Organising an R project at Grattan","heading":"3.1 Use RStudio projects, not setwd()","text":"Excel, data, code output generally live together one file. R, script, usually load data, something , save output. end multiple files - raw data, script, output. R script like recipe cookbook - R cooking recipe, needs know find ingredients (data) put finished product (delicious analysis).’s executing script, R needs know read files save files computer. default, uses working directory. working directory shown top console RStudio, can find running command getwd().can tell R folder use working directory using command setwd(), setwd(\"~/Desktop/random folder\") setwd(\"C:\\Users\\mcowgill\\Documents\\Somerandomfolder\"). bad idea avoid! anyone - including - tries run script different machine, different folder structure, probably won’t work. people can’t get past first line ’re trying run script, ’s annoying unnecessary hurdle reproducing checking analysis.words Jenny Bryan:first line R script setwd(\"C:\\Users\\jenny\\path\\\\\\\\\") come office SET COMPUTER FIRE.Seems fair.Creating ‘project’ RStudio sets working directory way ’s portable across machines.","code":""},{"path":"organising-projects.html","id":"how-to-create-a-project","chapter":"3 Organising an R project at Grattan","heading":"3.1.1 How to create a project","text":"Creating RStudio project straightforward: click File, New Project. can choose start project new directory, existing directory. Simple!RStudio create file .Rproj extension folder ’ve chosen.","code":""},{"path":"organising-projects.html","id":"opening-a-project","chapter":"3 Organising an R project at Grattan","heading":"3.1.2 Opening a project","text":"want work particular project, just open .Rproj file, click File -> Open project RStudio. working directory set directory contains .Rproj file.","code":""},{"path":"organising-projects.html","id":"use-relative-filepaths","chapter":"3 Organising an R project at Grattan","heading":"3.2 Use relative filepaths","text":"benefit using RStudio projects can use relative filepaths rather machine-specific filepaths. Machine-specific filepaths stop sharing work others, ’re also super annoying ! wants type full filepath everytime load save file?Bad, machine-specific filepaths, boo, hissInstead, use relative filepaths. filepaths relative (hence name) project folder, set creating RStudio project.Good, relative filepaths, cool, yayThe first example tells R look ‘data’ subdirectory project folder, ‘HES’ subdirectory ‘data,’ find ‘hes1516.csv’ file. file path isn’t specific machine, code shareable way.Grattan, even R package, called grattandata helps load certain types data R way makes script portable reusable colleagues. cover Reading Data chapter.","code":"hes <- read_csv(\"/Users/mcowgill/Desktop/hes1516.csv\")\nhes <- read_csv(\"C:\\Users\\mcowgill\\Desktop\\hes1516.csv\")\ngrattan_save(\"/Users/mcowgill/Desktop/images/expenditure_by_income.pdf\")\nhes <- read_csv(\"data/HES/hes1516.csv\")\ngrattan_save(\"atlas/expenditure_by_income.pdf\")"},{"path":"organising-projects.html","id":"keep-your-stuff-together","chapter":"3 Organising an R project at Grattan","heading":"3.3 Keep your stuff together","text":"script(s), data, output generally live place.3 place project folder - ’s folder contains .Rproj file created created RStudio project (, right? Scroll back page ).Don’t just put everything project folder . can get really overwhelming confusing, particularly anyone trying understand check work. Instead, separate code, source data, output subfolders.good structure subfolder :code - called ‘R’source data - called ‘data’graphs - called ‘atlas,’ like LaTeX projectsyour non-graph output, like formatted tables, called ‘output’Sometimes data folder might subfolders - ‘raw’ data ’ve done nothing , ‘clean’ data ’ve modified way. Don’t keep ‘raw’ data together place data ’ve modified.folder structures OK might make sense project. important thing folder structure, use structure easily comprehensible anyone else looking analysis.","code":""},{"path":"organising-projects.html","id":"manageable","chapter":"3 Organising an R project at Grattan","heading":"3.4 Keep your scripts manageable","text":"Unless project simple, ’s good idea put work one R script. Instead, break analysis discrete pieces put piece file. Number files make clear order ’re supposed run .’s useful structure:01_import.R02_tidy.R03_model.R04_visualise.RYou don’t need use filenames. Think works best project.clear script trying . Use meaningful filenames clearly indicate overarching purpose script. Use comments explain ’re things. Err side -commenting, rather -commenting (cover elsewhere guide). end script, can save script’s output, load file create next script.4","code":""},{"path":"organising-projects.html","id":"make-your-filenames-readable-by-both-machines-and-humans","chapter":"3 Organising an R project at Grattan","heading":"3.5 Make your filenames readable by both machines and humans","text":"another look example filenames set :01_import.R02_tidy.R03_model.R04_visualise.RThey’re sortable - start number. don’t spaces, software able handle . , even though ’re short minimal, give humans good idea files . strive choosing filenames.good principles naming files, see excellent presentation Jenny Bryan, includes following examples:Don’t create multiple versions script (like analysis_FINAL_002_MC.R analysis_FINALFINAL_003_MC_WM.R.) ’re familiar hellish scenario: work Word document (shudder, shudder, horror, etc.), email colleague, colleague edits sends back tweaked filename, like cool_word_doc_002.docx. Soon enough hard drive email client cluttered endless iterations document. Try avoid replicating nightmare R.end multiple versions, put everything latest version subfolder “R” folder, called “R/archive.” avoid horrible mess analysis_FINAL_002.R type documents cluttering folder, consider using Git version control.","code":""},{"path":"organising-projects.html","id":"README","chapter":"3 Organising an R project at Grattan","heading":"3.6 Include a README file","text":"analysis workflow might seem completely obvious . Let’s say one script load raw ABS microdata, run particular script clean , save cleaned data somewhere, load cleaned data second script produce summary table, use third script produce graph based summary table. Easy!Except might seem easy self-explanatory anyone comes along tries figure analysis works, including future.Make things easier including short text file - called README - project folder. explain purpose project, key files, (isn’t clear) order run. got data somewhere non-obvious, explain README file.","code":""},{"path":"organising-projects.html","id":"clean-workspace","chapter":"3 Organising an R project at Grattan","heading":"3.7 Keep your workspace clean","text":"Sometimes R doesn’t behave way expect . might run script find works fine, run find ’s producing strange output. can result changes R environment. can set different options R, can (silently!) affect things. maybe different objects - data, functions - defined environment second time round didn’t originally, extra packages loaded.avoid situation, keep workspace tidy. load script, fresh R session.… don’t clean workspace within analysis script. People sometimes using command:removes objects environment. doesn’t completely clear R environment, doesn’t anything packages loaded. Jenny Bryan puts , command “red flag, indicative non-reproducible workflow.”","code":"\nrm(list = ls())"},{"path":"organising-projects.html","id":"quick-guide","chapter":"3 Organising an R project at Grattan","heading":"3.8 Quick guide to starting a project","text":"’re starting new project:Open RStudio;Click ‘File -> New project’Click ‘New Directory’Click ‘New Project’Give new project name, choose go, click ‘Create Project’Create subfolders project folder using ‘New Folder’ button (default lower-right pane RStudio) - start ‘R’ folderClick ‘File -> New File -> R Script’Save R script R folder.Now ’ve got good shell project - dedicated folder, associated RStudio project, least one subfolder. good base start work.","code":""},{"path":"organising-projects.html","id":"analysis-template","chapter":"3 Organising an R project at Grattan","heading":"3.9 Using the grattan-analysis-template","text":"file Grattan Github contains template analysis R.\nincludes:R projectR/, data/, output/ foldersexamples best-practiceYou can access template Github repository.\nEither:download computer navigating Code Download ZIP (just click ); orclick Use Template, create new Github respository edit (see chapter Version control details get started Github, reach James).","code":""},{"path":"coding-style.html","id":"coding-style","chapter":"4 Grattan coding style","heading":"4 Grattan coding style","text":"page sets core elements coding style use Grattan. ’re new R, don’t stress remembering - even understanding - everything page. Just aware coding style, come back ’re bit along.benefits common coding style well explained Hadley Wickham:Good style important code one author, ’ll usually multiple readers. especially true ’re writing code others. case, ’s good idea agree common style -front.describe key elements Grattan coding style, without tedious . many elements coding style don’t cover guide; ’re unsure anything, consult tidyverse guide.also see Using R Grattan page guidelines setting project.core principle coding Grattan code readable humans.","code":""},{"path":"coding-style.html","id":"load-packages-first","chapter":"4 Grattan coding style","heading":"4.1 Load packages first","text":"analysis scripts almost always involve loading packages. laoded top script, one block like :’re loading package Github, ’s good idea leave comment say came , like :Don’t scatter library() calls throughout script - put top.thing come loading packages script preamble.","code":"\nlibrary(tidyverse)\nlibrary(grattantheme)\nlibrary(tidyverse)\nlibrary(grattantheme)\nlibrary(strayr) # remotes::install_github(\"runapp-aus/strayr\")"},{"path":"coding-style.html","id":"script-preamble","chapter":"4 Grattan coding style","heading":"4.2 Script preamble","text":"Describe script first lines using comments within RMarkdown document.GoodYour preamble might also pose research question script answer.GoodYour preamble shouldn’t terse, inscrutable comment.BadIf ’s hard concisely describe script lines plain English, might sign script many things. Consider breaking analysis series scripts. See Organising R Projects Grattan .preamble anticipate answer questions people might reviewing script. example:GoodThe preamble pertain code contained specific script. comments information analysis whole, put README file.","code":"\n# This script reads ABS data downloaded from TableBuilder and combines into a single data object containing post-secondary education levels by age and gender by SA3. \n# Do women have higher levels of educational attainment than men, within the same geographical areas and age groups?\n# make ABS ed data graph\n# This script calculates average income by age group and sex using the ABS Household Expenditure Survey and joins this to health information by age groups and sex from the National Health Survey. Note that we can't use the income variable in the NHS for this purpose, as it only contains information about respondents' income decile, not the income itself."},{"path":"coding-style.html","id":"use-comments","chapter":"4 Grattan coding style","heading":"4.3 Use comments","text":"Comments necessary code alone doesn’t tell full story. Comments tell reader ’re something, rather just ’re .example, comments important groups coded numbers rather character strings, might obvious someone reading script:Necessary commentWithout comment, readers code might aware 1 dataset corresponds male, age == \"05\" refers 35-39 year olds. Without comment, code self-explanatory.code self-explanatory, can include omit comments see fit.necessary (okay included)also include comments code complex may easily understood reader. ’re using function package isn’t commonly used Grattan, include comment explain .Err side commenting , rather less, throughout code. Something may seem obvious ’re writing code, might obvious person reading code, even person future. Better -comment -comment.Comments can go code chunks, next code - examples .","code":"\ndata %>% \n  filter(gender == 1,   # Keep only male observations\n         age == \"05\")   # Keep only 35-39 year-olds. \n# We want to only look at women aged 35-39\ndata %>% \n  filter(gender == \"Female\",\n         age >= 35 & age <= 39)"},{"path":"coding-style.html","id":"breaking-your-script-into-chunks","chapter":"4 Grattan coding style","heading":"4.4 Breaking your script into chunks","text":"’s useful break lengthy script chunks ----- (three hyphens).Good(practice, ’ll one line code block.)helps , others, navigate code better, using navigation tool built RStudio. script editor pane RStudio, bottom left, ’s little navigation tool helps easily jump named sections script.Breaking script chunks ----- also makes code easier read.","code":"\n# Read file A -----\n\na <- read_csv(\"data/a.csv\")\n\n# Read file B -----\n\nb <- read_csv(\"data/b.csv\")\n\n# Combine files A and B ----\n\nc <- bind_rows(a, b)"},{"path":"coding-style.html","id":"assigning-values-to-objects","chapter":"4 Grattan coding style","heading":"4.5 Assigning values to objects","text":"R, work objects. object might data frame, vector numbers letters, list. Functions can objects, .Use <- operator assign values objects. good examples:Avoid ->, = assign(). bad examples::bad operators work, best avoided. = operator avoided reasons visual consistency, style, avoid confusion. assign() avoided can lead unexpected behaviour, usually best way want . -> operator avoided ’s easy miss skimming code.<<- operator also avoided.","code":"\nschools <- read_csv(\"data/schools_data.csv\")\n\nthree_letters <- c(\"a\", \"b\", \"c\")\n\nlf <- labour_force %>%\n  filter(status != \"NILF\")\nschools = read_csv(\"data/schools_data.csv\")\n\nassign(\"three_letters\", c(\"a\", \"b\", \"c\"))\n\nlabour_force %>%\n  filter(status != \"NILF\") -> lf"},{"path":"coding-style.html","id":"naming-objects-and-variables","chapter":"4 Grattan coding style","heading":"4.6 Naming objects and variables","text":"’s important consistent naming things. saves time writing code. use consistent naming convention, don’t need stop remember object called ed_by_age edByAge ed..age. consistent naming convention across Grattan also makes easy read QC ’s code.Grattan uses words separated underscores _ (aka ‘snake_case’) name objects variables. common practice across Tidyverse.\nObject names descriptive --long. trade-, one ’s sometimes hard get right. However, using snake_case provides consistency:Good object namesBad object namesVariable names face similar trade-. , try descriptive short using snake_case:Good variable namesBad variable namesWhen load data outside Grattan, ABS microdata, variables often bad names. worth taking time top script rename variables, giving consistent, descriptive, short, snake_case names. easy way using clean_names() function janitor package:important thing code internally consistent - stick one naming convention objects variables. Using snake_case, strongly recommend, reduces friction people reading editing code. Using short names saves effort coding. Using descriptive names makes code easier read understand.","code":"\nsa3_population\ngdp_growth_vic\nuni_attainment\nsa3Pop\nGDPgrowthVIC\nuni.attainment\ngender\ngdp_growth\nhighest_edu\ns801LHSAA\ngdp.growth\nhighEdu\nchaosVar_name.silly\nvar2\ndf_with_bad_names <- data.frame(firstColumn = c(1:3),\n                                Second.column = c(4:6))\n\ndf_with_good_names <- janitor::clean_names(df_with_bad_names)\n\ndf_with_good_names##   first_column second_column\n## 1            1             4\n## 2            2             5\n## 3            3             6"},{"path":"coding-style.html","id":"spacing","chapter":"4 Grattan coding style","heading":"4.7 Spacing","text":"Giving code room breathe greatly helps readability future-others read code. Code without ample whitespace hard read, justasitishardertoreadEnglishsentenceswithoutspaces.","code":""},{"path":"coding-style.html","id":"assign-and-equals","chapter":"4 Grattan coding style","heading":"4.7.1 Assign and equals","text":"Put space side assign operator <-, equals =, ‘infix operators’ (==, +, -, ).GoodBadExceptions operators directly connect object, package function, spaces either side: ::, $, @, [, [[, etc.GoodBad","code":"\nuni_attainment <- filter(data, age == 25, gender == \"Female\")\nuni_attainment<-filter(data,age==25,gender==\"Female\")\nuni_attainment$gender\nuni_attainment$age[1:10]\nreadabs::read_abs()\nuni_attainment $ gender\nuni_attainment$ age [ 1 : 10]\nreadabs :: read_abs()"},{"path":"coding-style.html","id":"commas","chapter":"4 Grattan coding style","heading":"4.7.2 Commas","text":"Always put space comma , just like regular English.GoodBad","code":"\nselect(data, age, gender, sa2, sa3)\nselect(data,age,gender,sa2,sa3)\nselect(data ,age ,gender ,sa2 ,sa3)"},{"path":"coding-style.html","id":"parentheses","chapter":"4 Grattan coding style","heading":"4.7.3 Parentheses","text":"use spaces around parentheses cases:GoodBadFor spacing rules around , , , function, see Tidyverse guide.","code":"\nmean(x, na.rm = TRUE)\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )"},{"path":"coding-style.html","id":"short-lines-line-indentation-and-the-pipe","chapter":"4 Grattan coding style","heading":"4.8 Short lines, line indentation and the pipe %>%","text":"Keeping lines code short indenting consistent way can help make reading code much easier. supplying multiple arguments function, ’s generally good idea put argument new line - hit enter/return comma, like rename filter examples . Indentation makes clear code block starts finishes.Using pipes (%>%) instead nesting functions also makes things clearer.5 pipe always space , generally followed new line, example:Good: short lines indentationWithout indentation, code harder read. ’s clear chunk starts finishes, bits code arguments functions.Bad: short lines, indentationLong lines also bad hard read.\nBad: long linesWhen want take output function pass input another function, use pipe (%>%). Don’t write ugly, inscrutable code like , multiple functions wrapped around functions.War-crime bad: long lines without pipesWriting clear code chunks, functions strung together pipe (%>%), makes code much expressive able read understood. another reason favour R something like Excel, pushes people piece together functions Frankenstein’s monsters like :just threw mouth little bit.pipe function %>% can make code easy write read. pipe can create temptation string together lots lots functions one block code. can make things harder read understand.Resist urge use pipe make code blocks long. block code generally one thing, small number things.","code":"\nyoung_qual_income <- data %>%\n  rename(gender = s801LHSAA,\n         uni_attainment = high.ed) %>%\n  filter(income > 0,\n         age >= 25 & age <= 34) %>%\n  group_by(gender, \n           uni_attainment) %>%\n  summarise(mean_income = mean(income, \n                               na.rm = TRUE))\nyoung_qual_income <- data %>% \nrename(gender = s801LHSAA,\nuni_attainment = high.ed) %>% \nfilter(income > 0,\nage >= 25 & age <= 34) %>%\ngroup_by(gender, uni_attainment) %>% \nsummarise(mean_income = mean(income, na.rm = TRUE))\nyoung_qual_income <- data %>% rename(gender = s801LHSAA, uni_attainment = high.ed) %>% filter(income > 0, age >= 25 & age <= 34) %>% group_by(gender, uni_attainment) %>% summarise(mean_income = mean(income, na.rm = TRUE))\nyoung_qual_income<-summarise(group_by(filter(rename(data,gender=s801LHSAA,uni_attainment=high.ed),income>0,age>=25&age<=34),uni_attainment),mean_income=mean(income,na.rm=TRUE))=IF($G16 = \"All day\", INDEX(metrics!$D$8:$H$66, MATCH(INDEX(correspondence!$B$2:$B$23, MATCH('convert to tibble'!M$4, correspondence!$A$2:$A$23, 0)), metrics!$B$8:$B$66, 0), MATCH('convert to tibble'!$E16, metrics!$D$4:$H$4, 0)), \"NA\")"},{"path":"coding-style.html","id":"omit-needless-code","chapter":"4 Grattan coding style","heading":"4.9 Omit needless code","text":"Don’t retain code ultimately didn’t lead anywhere. produced graph ended used, don’t keep code script - want save , move subfolder named ‘archive’ similar. code include steps needed go raw data output - extraneous steps. ask someone QC work, shouldn’t wade 1000 lines code just find 200 lines actually required produce output.’re data analysis, ’ll often give R interactive commands help understand data looks like. example, might view dataframe View(mydf) str(mydf). fine, often necessary, ’re analysis. Don’t keep commands script. type commands usually entered straight R console, script. ’re script, delete .","code":""},{"path":"packages.html","id":"packages","chapter":"5 What are packages?","heading":"5 What are packages?","text":"R comes lot functions - commands - built broad range tasks. , really wanted, import dataset, clean , estimate model, make plot just using functions come R - known ‘base R’6. using packages make life easier.Like R , packages free open source. can install within RStudio.","code":""},{"path":"packages.html","id":"install-packages","chapter":"5 What are packages?","heading":"5.1 How to install packages","text":"’ll typically install packages using console RStudio. ’s part window , default, sits bottom-left corner screen.work Grattan, use packages two different source: Comprehensive R Archive Network (CRAN) Github. main difference need know use different commands install packages two sources.install package CRAN, use command install.packages().example, code install ggplot2 package CRAN:easiest way install package Github use function install_github(). Unfortunately, function doesn’t come base R. install_github() function part remotes package. use , first need install remotes CRAN:Now can install packages Github using install_github() function remotes package. example, ’s install Grattan ggplot2 theme, ’ll discuss later website:","code":"\ninstall.packages(\"ggplot2\")\ninstall.packages(\"remotes\")\nremotes::install_github(\"grattan/grattantheme\", dependencies = TRUE, upgrade = \"always\")"},{"path":"packages.html","id":"install-grattan-packages","chapter":"5 What are packages?","heading":"5.2 Get set up: install packages for Grattan","text":"Just starting setting new machine? Run block code get set :","code":"\ncran_packages <- c(\"devtools\", \"tidyverse\", \"readabs\", \"janitor\", \n                   \"rio\", \"sf\")\n\ninstall.packages(cran_packages)\n\ngithub_packages <- c(\"grattan/grattantheme\", \"grattan/grattandata\",\n                     \"wfmackey/absmapsdata\", \"grattan/grattanReporter\")\n\nremotes::install_github(github_packages,\n                        dependencies = TRUE,\n                        upgrade = \"always\")"},{"path":"packages.html","id":"using-packages","chapter":"5 What are packages?","heading":"5.3 Using packages","text":"using function comes package, need tell R look function. two main ways .can either load (aka ‘attach’) package using library() function. typically top script., can use two colons - :: - tell R use individual function package without loading :usually makes sense load package library(), unless need use one function twice. ’s harm using :: operator even already loaded package library(). can remove ambiguity R humans reading code, particularly ’re using obscure function - makes clearer function comes .","code":"\nlibrary(remotes)\n\n# Now that the `remotes` package is loaded, we can use its `install_github()` function:\n\ninstall_github(\"grattan/grattantheme\")\nremotes::install_github(\"grattan/grattantheme\")"},{"path":"packages.html","id":"upgrading-packages","chapter":"5 What are packages?","heading":"5.4 Upgrading packages","text":"’s generally good idea keep packages --date. easiest way run code:upgrade packages - including ’ve installed CRAN Github.run command, prompt ask packages want update - press 1 ‘.’asks ‘want install sources package needs compilation?’ type ‘’ press enter.7","code":"\ndevtools::update_packages()"},{"path":"packages.html","id":"downgrading-packages","chapter":"5 What are packages?","heading":"5.5 Downgrading packages","text":"Sometimes, packages change, functions evolve. arguments function might change, function might phased (‘deprecated’) favour another. can usually just adapt workflow package’s new version without much fuss. find isn’t case, want downgrade earlier version package, ’s straightforward. Just use install_version() function, like :’s rare ’d need downgrade. Better stay date, adapt code necessary changes packages.","code":"\ndevtools::install_version(\"devtools\", \"1.13.3\")"},{"path":"packages-commonly-used-at-grattan.html","id":"packages-commonly-used-at-grattan","chapter":"6 Packages commonly used at Grattan","heading":"6 Packages commonly used at Grattan","text":"packages use Grattan - like tidyverse collection packages - popular among R users. - like grattantheme package - specific Grattan Institute. Others - like readabs package - made Grattan people, useful Grattan, also used outside Institute. install core set packages use Grattan, click run code chunk.","code":""},{"path":"packages-commonly-used-at-grattan.html","id":"tidyverse","chapter":"6 Packages commonly used at Grattan","heading":"6.1 The tidyverse!","text":"tidyverse central work Grattan. tidyverse collection related R packages importing, wrangling, exploring visualising data R. packages designed work well together.\nmain packages tidyverse include:ggplot2 making beautiful, customisable graphsdplyr manipulating data framestidyr tidying datareadr importing data broad range formatspurrr functional programmingstringr manipulating strings textAll packages (!) automatically loaded run command8:range packages installed machine part tidyverse. include:readxl importing Excel spreadsheets Rhaven importing Stata, SAS SPSS datalubridate working datesrvest scraping websitesAlthough packages installed part tidyverse, aren’t loaded automatically run library(tidyverse). ’ll need load individually, like:","code":"\nlibrary(tidyverse)## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──## ✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n## ✓ tibble  3.1.3     ✓ dplyr   1.0.7\n## ✓ tidyr   1.1.3     ✓ stringr 1.4.0\n## ✓ readr   2.0.0     ✓ forcats 0.5.1## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## x dplyr::filter() masks stats::filter()\n## x dplyr::lag()    masks stats::lag()\nlibrary(lubridate)\nlibrary(readxl)"},{"path":"packages-commonly-used-at-grattan.html","id":"why-do-we-use-the-tidyverse","chapter":"6 Packages commonly used at Grattan","heading":"6.1.1 Why do we use the tidyverse?","text":"tidyverse makes life easier!core tidyverse packages, like ggplot2, dplyr, tidyr, extremely popular. tidyverse probably popular ‘dialect’ R. means problem encounter tidyverse encountered many times R users, solution Google search away.tidyverse packages designed work well together, consistent underlying philosophy design. means coding habits learn one tidyverse package, like dplyr, also applicable packages, like tidyr.’re designed work data frames9, rectangular data object familiar spreadsheet users intuitive convenient sort work Grattan. particular, tidyverse built around concept tidy data, specific meaning context ’ll come later. fact tidyverse packages built around one type data object makes easier work .creator tidyverse, Hadley Wickham, places great value code expressive comprehensible humans. means code written tidyverse idiom often able understood even haven’t encountered functions . example, look chunk code:Without knowing my_data looks like, even haven’t encountered functions , reasonably intuitive. ’re taking data, then10 keeping observations relate people aged 30 older, calculating new variable, relative_income. name tidyverse function - like filter, group_by, summarise, - generally gives pretty good idea function going data, isn’t always case approaches.’s one way thing base R:base R code gets job done, ’s clunkier, less expressive, harder read. core principle coding Grattan strive make work human readable.Code written tidyverse functions often faster base R equivalents. work Grattan small--medium sized datasets (fewer million rows ), speed isn’t usually major concern anyway.11The valuable resource deal Grattan time. Computers cheap, people . code executes quickly, takes colleague many hours decipher , cost extra QC time outweighs saving faster computation. tidyverse packages strike balance expressive, comprehensible code computational efficiency suits nature work Grattan. balance right one work, time.R scripts Grattan start library(tidyverse). work data frames, time tidyverse contains core tools ’ll need work.","code":"\nmy_data %>%\n  filter(age >= 30) %>%\n  mutate(relative_income = income / mean(income))\ntransform(my_data[my_data$age >= 30, ],\n          relative_income = income / mean(income))"},{"path":"packages-commonly-used-at-grattan.html","id":"grattan-specific-packages","chapter":"6 Packages commonly used at Grattan","heading":"6.2 Grattan-specific packages","text":"range Grattan people written packages come handy Grattan.\n* grattantheme grattantheme package, Matt Cowgill Mackey, helps make ggplot2 charts Grattan-y. cover package extensively data visualisation chapter.grattandata grattandata package, Matt Cowgill Jonathan Nolan, used load microdata Grattan microdata repository. cover reading data chapter.grattandata grattandata package, Matt Cowgill Jonathan Nolan, used load microdata Grattan microdata repository. cover reading data chapter.grattan grattan package, created Hugh Parsonage, contains two broad sets functions. One set functions (sometimes known nickname “Grattax”) used modelling personal income tax system. Another set functions (“Grattools”) useful lot work, like converting dates financial years (grattan::date2fy()) version dplyr::ntile() uses weights (grattan::weighted_ntile()).grattan grattan package, created Hugh Parsonage, contains two broad sets functions. One set functions (sometimes known nickname “Grattax”) used modelling personal income tax system. Another set functions (“Grattools”) useful lot work, like converting dates financial years (grattan::date2fy()) version dplyr::ntile() uses weights (grattan::weighted_ntile()).","code":""},{"path":"packages-commonly-used-at-grattan.html","id":"other-commonly-used-packages","chapter":"6 Packages commonly used at Grattan","heading":"6.3 Other commonly-used packages","text":"packages commonly use Grattan, including developed Grattan staff. include:absmapsdata package, Mackey, handy working spatial data. ’ll want ’re going making maps.absmapsdata package, Mackey, handy working spatial data. ’ll want ’re going making maps.readabs readabs package, Matt Cowgill, provides easy way download, tidy, import ABS time series data R.readabs readabs package, Matt Cowgill, provides easy way download, tidy, import ABS time series data R.","code":""},{"path":"getting-help-with-r.html","id":"getting-help-with-r","chapter":"7 Getting help with R","heading":"7 Getting help with R","text":"important skill need learn use R well get help. great list steps try:blog post explains steps bit length.important step often breaking problem small, reproducible example - reprex R jargon. Often, process making reprex can make problem appear clearly , ’ll solve even ask someone else!","code":""},{"path":"getting-help-with-r.html","id":"getting-help-with-r-problems-at-grattan","chapter":"7 Getting help with R","heading":"7.1 Getting help with R problems at Grattan","text":"channel #r_at_grattan Grattan Slack great place get answers R questionsThis guide\nPackage vignettes\nMatt, , others","code":""},{"path":"getting-help-with-r.html","id":"getting-help-with-r-problems-in-general","chapter":"7 Getting help with R","heading":"7.2 Getting help with R problems in general","text":"guide Googling well","code":""},{"path":"getting-help-with-r.html","id":"resources-for-learning-r","chapter":"7 Getting help with R","heading":"7.3 Resources for learning R","text":"R4DS, et al.","code":""},{"path":"reading-data.html","id":"reading-data","chapter":"8 Reading data","heading":"8 Reading data","text":"","code":""},{"path":"reading-data.html","id":"importing-data","chapter":"8 Reading data","heading":"8.1 Importing data","text":"","code":""},{"path":"reading-data.html","id":"reading-csv-files","chapter":"8 Reading data","heading":"8.1.1 Reading CSV files","text":"","code":""},{"path":"reading-data.html","id":"read_csv","chapter":"8 Reading data","heading":"8.1.1.1 read_csv()","text":"read_csv() function tidyverse quicker smarter read.csv base R.Pitfalls:\n1. read_csv quicker surveys sample dataWe can also compress .csv files .zip files read directly using read_csv():useful two reasons:data takes less room computer; andThe original data, shouldn’t ever directly edited, protected directly edited.","code":"\nread_csv(\"data/my_data.zip\")"},{"path":"reading-data.html","id":"data.tablefread","chapter":"8 Reading data","heading":"8.1.1.2 data.table::fread()","text":"fread function data.table quicker read.csv read_csv.","code":""},{"path":"reading-data.html","id":"read_microdata","chapter":"8 Reading data","heading":"8.1.2 grattandata::read_microdata()","text":"","code":""},{"path":"reading-data.html","id":"readxlread_excel","chapter":"8 Reading data","heading":"8.1.3 readxl::read_excel()","text":"","code":""},{"path":"reading-data.html","id":"rio","chapter":"8 Reading data","heading":"8.1.4 rio","text":"","code":""},{"path":"reading-data.html","id":"readabs","chapter":"8 Reading data","heading":"8.1.5 readabs","text":"","code":""},{"path":"reading-data.html","id":"reading-common-files","chapter":"8 Reading data","heading":"8.2 Reading common files:","text":"TableBuilder CSVSTRINGsHES household fileSIHLSAY derivativesSee data directory list microdata available Grattan.","code":""},{"path":"reading-data.html","id":"appropriately-renaming-variables","chapter":"8 Reading data","heading":"8.3 Appropriately renaming variables","text":"shown style guideAdd rename_abs function common Grattan package?","code":""},{"path":"reading-data.html","id":"getting-to-tidy-data","chapter":"8 Reading data","heading":"8.4 Getting to tidy data","text":"pivot_long() pivot_wide()\nMake sure stable btw","code":""},{"path":"different-data-types.html","id":"different-data-types","chapter":"9 Different data types","heading":"9 Different data types","text":"Data comes many different forms. chapter explores forms provides tools deal .’s useful make distinction data structures data types. simplification need think now.Data structures objects hold data. vector stores elements one dimension. data.frame (tibble12) combines vectors length two dimensions rows columns. list can store data way like.work Grattan, tidy data within tibbles – row observation, column variable – usually preferred.picking common structure data, able transform, plot analyse using common set functions. don’t need move one method another depending data looks like.tibble collection vectors length. vector must single data type.key data types use :Numerics (numbers) sub-types doubles integers.Characters, also known strings, deal text variables.Factors, stricter type characters use categorical variables.Dates, notoriously hard deal statistical software.following sections walk data types best handle . ’ll first load required packages read data.","code":""},{"path":"different-data-types.html","id":"set-up-and-packages","chapter":"9 Different data types","heading":"9.1 Set-up and packages","text":"chapter uses packages designed help different data types.stringr package helps deal characters. forcats package helps factors. lubridate package helps – lot! – dates.three packages installed part tidyverse installed . stringr forcats loaded library(tidyverse), lubridate isn’t needs loaded separately.charts chapter, ’ll use sa3_income data summarised .13 tidy dataset containing median income number workers SA3, occupation gender 2010 2015:","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nsa3_income <- read_csv(\"data/sa3_income.csv\")\n\nglimpse(sa3_income)## Rows: 47,899\n## Columns: 16\n## $ sa3                   <dbl> 10102, 10102, 10102, 10102, 10102, 10102, 10102,…\n## $ sa3_name              <chr> \"Queanbeyan\", \"Queanbeyan\", \"Queanbeyan\", \"Quean…\n## $ sa3_sqkm              <dbl> 6511.191, 6511.191, 6511.191, 6511.191, 6511.191…\n## $ sa3_income_percentile <dbl> 80, 76, 78, 76, 74, 79, 80, 76, 78, 76, 74, 79, …\n## $ sa4_name              <chr> \"Capital Region\", \"Capital Region\", \"Capital Reg…\n## $ gcc_name              <chr> \"Rest of NSW\", \"Rest of NSW\", \"Rest of NSW\", \"Re…\n## $ state                 <chr> \"NSW\", \"NSW\", \"NSW\", \"NSW\", \"NSW\", \"NSW\", \"NSW\",…\n## $ occupation            <chr> \"Clerical and Administrative Workers\", \"Clerical…\n## $ occ_short             <chr> \"Admin\", \"Admin\", \"Admin\", \"Admin\", \"Admin\", \"Ad…\n## $ prof                  <chr> \"Non-professional\", \"Non-professional\", \"Non-pro…\n## $ gender                <chr> \"Women\", \"Women\", \"Women\", \"Women\", \"Women\", \"Wo…\n## $ year                  <dbl> 2011, 2012, 2013, 2014, 2015, 2016, 2011, 2012, …\n## $ median_income         <dbl> 52127, 54894, 57868, 59025, 59041, 62741, 66900,…\n## $ average_income        <dbl> 51306, 53807, 56405, 57742, 58286, 61591, 66869,…\n## $ total_income          <dbl> 235853682, 253323356, 266908460, 264054166, 2382…\n## $ workers               <dbl> 4597, 4708, 4732, 4573, 4087, 4448, 1459, 1467, …"},{"path":"different-data-types.html","id":"why-data-types-matter","chapter":"9 Different data types","heading":"9.2 Why data types matter","text":"Data ‘types’ define data stored can () .can maths numbers:can perform string operations characters:can’t perform maths characters, doesn’t really make sense:Even kind think :, R trying multiply character \"100\" number 2. – types data – makes much sense \"Hello\" \\(\\times\\) 2.Defining checking aware ‘type’ data boring tedious task common statistical languages/software.\n’s just something need .knowing information save countless errors, like ones , future.\n’ll get briefly, focussing things need know solve problems likely encounter.","code":"\nnum1 <- 10\nnum2 <- 5\n\nnum1 + num2## [1] 15\nnum1 / num2## [1] 2\nchar1 <- \"Hello\"\n\nsubstring(char1, 4, 6)## [1] \"lo\"\n\"Hello\" * 2 ## Error in \"Hello\" * 2: non-numeric argument to binary operator\n\"100\" * 2## Error in \"100\" * 2: non-numeric argument to binary operator"},{"path":"different-data-types.html","id":"checking-and-changing-data-types","chapter":"9 Different data types","heading":"9.3 Checking and changing data types","text":"can use str function check type object:can also change assert data type explicitly:cautious: forcing data one type another can lead NA values conversion isn’t possible. example:characters “Hello” can’t converted number, R replaces NA throws warning message.next section extends concepts single elements whole variables data.","code":"\nob1 <- \"Hello\"\nstr(ob1)##  chr \"Hello\"\nob2 <- 10\nstr(ob2)##  num 10\nob3 <- \"10\"\nstr(ob3)##  chr \"10\"\nob4 <- as.numeric(\"10\")\nstr(ob4)##  num 10\nob5 <- as.character(10)\nstr(ob5)##  chr \"10\"\nob6 <- \"Hello\"\nas.numeric(ob6)## Warning: NAs introduced by coercion## [1] NA"},{"path":"different-data-types.html","id":"checking-and-changing-data-types-in-vectors-and-tibbles","chapter":"9 Different data types","heading":"9.4 Checking and changing data types in vectors and tibbles","text":"tibble, variable vector can one---one data type.variable can numeric, character, factor, date, something else entirely.\ncan one type.14\nmeans every observation variable must type.example tibble explore can check, change use different data types.\ntibble constructed defining four vectors:first two variables easy.\nname contains strings set character variable.\nnumb1 contains numbers set double.numb2 messy variables also strings, R store character variables (even human may able decipher strings numbers),numb3 contains numbers strings. case, R converts everything character preserve information.can check types variables eg dataset str function:tells us data structure tbl_df, tbl data.frame (.e. tibble), data types variables : character, numeric, character, character character.first two variables classified want . names stored characters; numb1 stored doubles.can see numb2 set numbers stored characters. means can’t use wonderful numeric powers:want change , redefine numb2 variable using mutate function (previous chapter) .numeric function described previous section:tibble output shows numb2 now double. Yay! means can maths :numb3? numbers string stored character variable. use approach :convert numb3 variable numeric, wanted. casualties. \"None\" neatly converted number, string last observation removed replaced NA (get warning NAs introduced coercion).Converting strings numerics made harder data stored messily. messy variable made numbers humans decipher. .numeric function tries best:convert variable numeric. .numeric function nails \"1\" removes leading trailing white-spaces \"  1  \". doesn’t understand space middle \"0. 1\", doesn’t convert percentage \"1%\". Luckily, warning message tells us happened.Complications like mean watch data read.","code":"\neg <- tibble(\n  name = c(\"Kate\", \"Jonathan\", \"Emily\", \"James\"),\n  numb1 = c(1, 2, 3, 4),\n  numb2 = c(\"-10\", \"10\", \"-20\", \"20\"),\n  numb3 = c(100, 1000, 10000, \"None\"),\n  messy = c(\"1\", \"  1  \", \"0. 1\", \"1%\")\n)\n\neg## # A tibble: 4 × 5\n##   name     numb1 numb2 numb3 messy  \n##   <chr>    <dbl> <chr> <chr> <chr>  \n## 1 Kate         1 -10   100   \"1\"    \n## 2 Jonathan     2 10    1000  \"  1  \"\n## 3 Emily        3 -20   10000 \"0. 1\" \n## 4 James        4 20    None  \"1%\"\nstr(eg)## tibble [4 × 5] (S3: tbl_df/tbl/data.frame)\n##  $ name : chr [1:4] \"Kate\" \"Jonathan\" \"Emily\" \"James\"\n##  $ numb1: num [1:4] 1 2 3 4\n##  $ numb2: chr [1:4] \"-10\" \"10\" \"-20\" \"20\"\n##  $ numb3: chr [1:4] \"100\" \"1000\" \"10000\" \"None\"\n##  $ messy: chr [1:4] \"1\" \"  1  \" \"0. 1\" \"1%\"\neg %>% \n  mutate(numb2_div10 = numb2 / 10)## Error: Problem with `mutate()` column `numb2_div10`.\n## ℹ `numb2_div10 = numb2/10`.\n## x non-numeric argument to binary operator\neg %>% \n  mutate(numb2 = as.numeric(numb2))## # A tibble: 4 × 5\n##   name     numb1 numb2 numb3 messy  \n##   <chr>    <dbl> <dbl> <chr> <chr>  \n## 1 Kate         1   -10 100   \"1\"    \n## 2 Jonathan     2    10 1000  \"  1  \"\n## 3 Emily        3   -20 10000 \"0. 1\" \n## 4 James        4    20 None  \"1%\"\neg %>% \n  mutate(numb2 = as.numeric(numb2),\n         numb2_div10 = numb2 / 10)## # A tibble: 4 × 6\n##   name     numb1 numb2 numb3 messy   numb2_div10\n##   <chr>    <dbl> <dbl> <chr> <chr>         <dbl>\n## 1 Kate         1   -10 100   \"1\"              -1\n## 2 Jonathan     2    10 1000  \"  1  \"           1\n## 3 Emily        3   -20 10000 \"0. 1\"           -2\n## 4 James        4    20 None  \"1%\"              2\neg %>% \n  mutate(numb3 = as.numeric(numb3))## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion## # A tibble: 4 × 5\n##   name     numb1 numb2 numb3 messy  \n##   <chr>    <dbl> <chr> <dbl> <chr>  \n## 1 Kate         1 -10     100 \"1\"    \n## 2 Jonathan     2 10     1000 \"  1  \"\n## 3 Emily        3 -20   10000 \"0. 1\" \n## 4 James        4 20       NA \"1%\"\neg %>% \n  mutate(messy = as.numeric(messy))## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion## # A tibble: 4 × 5\n##   name     numb1 numb2 numb3 messy\n##   <chr>    <dbl> <chr> <chr> <dbl>\n## 1 Kate         1 -10   100       1\n## 2 Jonathan     2 10    1000      1\n## 3 Emily        3 -20   10000    NA\n## 4 James        4 20    None     NA"},{"path":"different-data-types.html","id":"asserting-data-types-when-importing-data","chapter":"9 Different data types","heading":"9.5 Asserting data types when importing data","text":"","code":""},{"path":"different-data-types.html","id":"changing-the-data-types-of-lots-of-variables","chapter":"9 Different data types","heading":"9.6 Changing the data types of lots of variables","text":"","code":""},{"path":"different-data-types.html","id":"using-character-vectors","chapter":"9 Different data types","heading":"9.7 Using character vectors","text":"Characters contain information quotes, like letter word sentence. can contain (almost) anything. ‘rules,’ unlike numerics, factors dates. freedom can good bad depending situation: sometimes restrictions good!","code":"\n\"hello\"## [1] \"hello\"\nc(\"hello\", 1) %>% typeof()## [1] \"character\"\nc(\"hello\", 1) %>% class()## [1] \"character\"\nc(\"hello\", 1) %>% str()##  chr [1:2] \"hello\" \"1\""},{"path":"different-data-types.html","id":"using-dates-with-lubridate","chapter":"9 Different data types","heading":"9.8 Using dates with lubridate::","text":"Dates hard, dealing dates statistical software like R, ExcelThe lubridate:: package","code":""},{"path":"different-data-types.html","id":"strings-with-stringr","chapter":"9 Different data types","heading":"9.9 Strings with stringr::","text":"Replacing valuesMatching valuesSeparating columns","code":""},{"path":"different-data-types.html","id":"factors-with-forcats","chapter":"9 Different data types","heading":"9.10 Factors with forcats::","text":"Dangers factors","code":""},{"path":"data-transformation-with-dplyr.html","id":"data-transformation-with-dplyr","chapter":"10 Data transformation with dplyr","heading":"10 Data transformation with dplyr","text":"section focusses transforming rectangular datasets.dplyr verbs concepts covered chapter also covered video Garrett Grolemund (co-author R Data Science Hadley Wickham).","code":""},{"path":"data-transformation-with-dplyr.html","id":"set-up","chapter":"10 Data transformation with dplyr","heading":"10.1 Set up","text":"Load packages first. chapter just uses packages contained tidyverse:sa3_income dataset used key examples chapter.15 long dataset ABS contains average income number workers Statistical Area 3, occupation sex 2011 2016.haven’t already, download sa3_income.csv file data folder:read using read_csv function:","code":"\nlibrary(tidyverse)\ndownload.file(url = \"https://raw.githubusercontent.com/grattan/R_at_Grattan/master/data/sa3_income.csv\",\n              destfile = \"data/sa3_income.csv\")\nsa3_income <- read_csv(\"data/sa3_income.csv\")## Rows: 47899 Columns: 16## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (8): sa3_name, sa4_name, gcc_name, state, occupation, occ_short, prof, g...\n## dbl (8): sa3, sa3_sqkm, sa3_income_percentile, year, median_income, average_...## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nhead(sa3_income)## # A tibble: 6 × 6\n##    year sa3_name  state gender income workers\n##   <dbl> <chr>     <chr> <chr>   <dbl>   <dbl>\n## 1  2011 Belconnen ACT   Men    54105.   67774\n## 2  2012 Belconnen ACT   Men    56724.   69435\n## 3  2013 Belconnen ACT   Men    58918.   69697\n## 4  2014 Belconnen ACT   Men    60525.   68613\n## 5  2015 Belconnen ACT   Men    60964.   63428\n## 6  2016 Belconnen ACT   Men    63389.   69828"},{"path":"data-transformation-with-dplyr.html","id":"the-pipe","chapter":"10 Data transformation with dplyr","heading":"10.2 The pipe: %>%","text":"almost always want perform one operations described dataset. One way perform multiple operations, one , ‘nest’ inside. nesting painfully familiar Excel users.Consider example baking eating cake.16 take ingredients, combine , mix, bake, eat . nested formula, process looks like:nested formula, need start middle work way . means anyone reading code – including future! – needs start middle work way . ’re used left-right reading, ’re particularly good naturally interpreting nested functions like one.‘pipe’ can help. pipe operator %>% (keyboard shortcut: cmd + shift + m) takes argument left ‘pipes’ function right. time see %>%, can read ‘.’express baking example :reads :take ingredients, combine, mix, bake, eat .thing eat(bake(mix(combine(ingredients)))). ’s much nicer natural read, write.Another example: function paste takes arguments combines together single string. use pipe :asOr define vector numbers pass17 sum() function:skip intermediate step altogether::benefits piping become clear want perform sequential operations dataset. example, might want filter observations sa3_income data NSW, group_by gender summarise income grops (functions explained detail ). functions take ‘data’ first argument, designed used pipes.Like income differential shows, writing process nested function outrageous hard read:original common way avoid unseemly nesting R assign ‘step’ object, definitely clearer:using pipes make steps clearer still:take sa3_income data, %>%filter NSW, %>%group gender, %>%summarise ","code":"\neat(bake(mix(combine(ingredients))))\ningredients %>% # and then\n  combine() %>% # and then\n  mix() %>% # and then\n  bake() %>% # and then\n  eat() # yum!\n\"hello\" %>% paste(\"dear\", \"reader\")## [1] \"hello dear reader\"\npaste(\"hello\", \"dear\", \"reader\")## [1] \"hello dear reader\"\nmy_numbers <- c(1, 2, 3, 5, 8, 13)\n\nmy_numbers %>% sum()## [1] 32\nc(1, 2, 3, 5, 8, 13) %>% \n  sum()## [1] 32\nsum(c(1, 2, 3, 5, 8, 13))## [1] 32\nsummarise((group_by(filter(sa3_income, state == \"NSW\"), gender)), av_mean_income = mean(income))## # A tibble: 2 × 2\n##   gender av_mean_income\n##   <chr>           <dbl>\n## 1 Men            58202.\n## 2 Women          41662.\ndata1 <- filter(sa3_income, state == \"NSW\")\ndata2 <- group_by(data1, gender)\ndata3 <- summarise(data2, av_mean_income = mean(income))\ndata3## # A tibble: 2 × 2\n##   gender av_mean_income\n##   <chr>           <dbl>\n## 1 Men            58202.\n## 2 Women          41662.\nsa3_income %>%  # and then\n  filter(state == \"NSW\") %>% # and then \n  group_by(gender) %>% # and then\n  summarise(av_mean_income = mean(income))## # A tibble: 2 × 2\n##   gender av_mean_income\n##   <chr>           <dbl>\n## 1 Men            58202.\n## 2 Women          41662."},{"path":"data-transformation-with-dplyr.html","id":"select-variables-with-select","chapter":"10 Data transformation with dplyr","heading":"10.3 Select variables with select()","text":"select function takes dataset keeps drops variables (columns) specified.example, look variables sa3_income dataset (using names() function):wanted keep just state income variables, take sa3_income dataset select just variables:use - (minus) remove state sa3_name variables:18","code":"\nnames(sa3_income)## [1] \"year\"     \"sa3_name\" \"state\"    \"gender\"   \"income\"   \"workers\"\nsa3_income %>% \n  select(state, income)## # A tibble: 4,019 × 2\n##    state income\n##    <chr>  <dbl>\n##  1 ACT   54105.\n##  2 ACT   56724.\n##  3 ACT   58918.\n##  4 ACT   60525.\n##  5 ACT   60964.\n##  6 ACT   63389.\n##  7 ACT   53139.\n##  8 ACT   54515.\n##  9 ACT   58132.\n## 10 ACT   56247.\n## # … with 4,009 more rows\nsa3_income %>% \n  select(-state, -sa3_name)## # A tibble: 4,019 × 4\n##     year gender income workers\n##    <dbl> <chr>   <dbl>   <dbl>\n##  1  2011 Men    54105.   67774\n##  2  2012 Men    56724.   69435\n##  3  2013 Men    58918.   69697\n##  4  2014 Men    60525.   68613\n##  5  2015 Men    60964.   63428\n##  6  2016 Men    63389.   69828\n##  7  2011 Men    53139.     666\n##  8  2012 Men    54515.     647\n##  9  2013 Men    58132.     641\n## 10  2014 Men    56247.     561\n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"selecting-groups-of-variables","chapter":"10 Data transformation with dplyr","heading":"10.3.1 Selecting groups of variables","text":"Sometimes can useful keep drop variables names certain characteristic; begin text string, end one, contain one, pattern altogether.can use patterns ‘select helpers’19\nTidyverse help deal sets variables.example, want keep just SA3 state variables – ie variables start \"s\" – :, instead, wanted keep just variables contain \"er\", :wanted keep \"s\" variables \"er\" variables, :full list handy select functions provided ?tidyselect::select_helpers documentation, listed :starts_with(): Starts prefix.ends_with(): Ends suffix.contains(): Contains literal string.matches(): Matches regular expression.num_range(): Matches numerical range like x01, x02, x03.one_of(): Matches variable names character vector.everything(): Matches variables.last_col(): Select last variable, possibly offset.","code":"\nsa3_income %>% \n  select(starts_with(\"s\"))## # A tibble: 4,019 × 2\n##    sa3_name      state\n##    <chr>         <chr>\n##  1 Belconnen     ACT  \n##  2 Belconnen     ACT  \n##  3 Belconnen     ACT  \n##  4 Belconnen     ACT  \n##  5 Belconnen     ACT  \n##  6 Belconnen     ACT  \n##  7 Canberra East ACT  \n##  8 Canberra East ACT  \n##  9 Canberra East ACT  \n## 10 Canberra East ACT  \n## # … with 4,009 more rows\nsa3_income %>% \n  select(contains(\"er\"))## # A tibble: 4,019 × 2\n##    gender workers\n##    <chr>    <dbl>\n##  1 Men      67774\n##  2 Men      69435\n##  3 Men      69697\n##  4 Men      68613\n##  5 Men      63428\n##  6 Men      69828\n##  7 Men        666\n##  8 Men        647\n##  9 Men        641\n## 10 Men        561\n## # … with 4,009 more rows\nsa3_income %>% \n  select(starts_with(\"s\"), contains(\"er\"), )## # A tibble: 4,019 × 4\n##    sa3_name      state gender workers\n##    <chr>         <chr> <chr>    <dbl>\n##  1 Belconnen     ACT   Men      67774\n##  2 Belconnen     ACT   Men      69435\n##  3 Belconnen     ACT   Men      69697\n##  4 Belconnen     ACT   Men      68613\n##  5 Belconnen     ACT   Men      63428\n##  6 Belconnen     ACT   Men      69828\n##  7 Canberra East ACT   Men        666\n##  8 Canberra East ACT   Men        647\n##  9 Canberra East ACT   Men        641\n## 10 Canberra East ACT   Men        561\n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"filter-with-filter","chapter":"10 Data transformation with dplyr","heading":"10.4 Filter with filter()","text":"filter function takes dataset keeps observations (rows) meet conditions.filter one required first argument – data – many ‘conditions’ want provide.","code":""},{"path":"data-transformation-with-dplyr.html","id":"conditions-logical-operations-true-or-false","chapter":"10 Data transformation with dplyr","heading":"10.4.1 Conditions; logical operations; TRUE or FALSE","text":"conditions logical operations, meaning statement return either TRUE FALSE computer’s mind.20We know, instance, 12 equal 12 1 + 2 equal 12. means type 12 == 12 1 + 2 == 12 console give FALSE:, can see 1 + 2 equal 5 9 3 providing vector numbers:works character strings, :lot ‘data science’ based TRUE FALSE conditions.","code":"\n12 == 12## [1] TRUE\n1 + 2 == 12## [1] FALSE\n1 + 2 == c(5, 9, 3)## [1] FALSE FALSE  TRUE\n\"apple\" == c(\"orange\", \"apple\", 7)## [1] FALSE  TRUE FALSE"},{"path":"data-transformation-with-dplyr.html","id":"filtering-data-with-filter","chapter":"10 Data transformation with dplyr","heading":"10.4.2 Filtering data with filter","text":"Turning back sa3_income data, just wanted see observations people NT:might just want look high-income (income > 70,000) areas Victoria 2015:commas filter function represent ‘’ &. can read steps :take sa3_income data filter keep observations Victoria, average income 70k, year 2015.Sometimes might want relax little, keeping observations one category another. can symbol: |21Which reads:take sa3_income data filter keep observations Victoria NSW, average income 100k, year 2015 2016.","code":"\nsa3_income %>% \n  filter(state == \"NT\")## # A tibble: 123 × 6\n##     year sa3_name      state gender income workers\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>\n##  1  2011 Alice Springs NT    Men    52602.   23663\n##  2  2012 Alice Springs NT    Men    55050.   24065\n##  3  2013 Alice Springs NT    Men    57251.   24218\n##  4  2014 Alice Springs NT    Men    58403.   24566\n##  5  2015 Alice Springs NT    Men    60084.   24562\n##  6  2016 Alice Springs NT    Men    64330.   22048\n##  7  2011 Barkly        NT    Men    50517.    2272\n##  8  2012 Barkly        NT    Men    52474.    2321\n##  9  2013 Barkly        NT    Men    55006.    2364\n## 10  2014 Barkly        NT    Men    56543.    2234\n## # … with 113 more rows\nsa3_income %>% \n  filter(state == \"Vic\",\n         income > 70000,\n         year == 2015)## # A tibble: 3 × 6\n##    year sa3_name           state gender income workers\n##   <dbl> <chr>              <chr> <chr>   <dbl>   <dbl>\n## 1  2015 Bayside            Vic   Men    77175.   62460\n## 2  2015 Stonnington - East Vic   Men    70652.   27922\n## 3  2015 Stonnington - West Vic   Men    70234.   47597\nsa3_income %>% \n  filter(state == \"Vic\" | state == \"Tas\",\n         income > 100000,\n         year == 2015 | year == 2016)## # A tibble: 0 × 6\n## # … with 6 variables: year <dbl>, sa3_name <chr>, state <chr>, gender <chr>,\n## #   income <dbl>, workers <dbl>"},{"path":"data-transformation-with-dplyr.html","id":"grouped-filtering-with-group_by","chapter":"10 Data transformation with dplyr","heading":"10.4.3 Grouped filtering with group_by()","text":"group_by function groups dataset given variables. effectively generates one dataset per group within main dataset. function apply – like filter() – applied grouped datasets.example, filter sa3_income dataset keep just observation highest average income:keep observations highest average incomes state, can group_by state, filter:22From description tibble , can learn data 8 unique groups state:## # Groups:       state [8]keep observations lowest average incomes state year:23The dataset remains grouped function(s). explicitly ‘ungroup’ data, add ungroup function chain (‘Groups’ note disappeared ):","code":"\nsa3_income %>% \n  filter(income == max(income))## # A tibble: 1 × 6\n##    year sa3_name     state gender  income workers\n##   <dbl> <chr>        <chr> <chr>    <dbl>   <dbl>\n## 1  2015 West Pilbara WA    Men    107844.   22928\nsa3_income %>% \n  group_by(state) %>% \n  filter(income == max(income))## # A tibble: 8 × 6\n## # Groups:   state [8]\n##    year sa3_name                 state gender  income workers\n##   <dbl> <chr>                    <chr> <chr>    <dbl>   <dbl>\n## 1  2013 Molonglo                 ACT   Men     92947.     227\n## 2  2016 North Sydney - Mosman    NSW   Men     90668.   74702\n## 3  2016 Christmas Island         NT    Men     84474.     621\n## 4  2015 Gladstone                Qld   Men     97282.   48026\n## 5  2015 Outback - North and East SA    Men     71791.   15849\n## 6  2016 West Coast               Tas   Men     58116.   11117\n## 7  2016 Bayside                  Vic   Men     78624.   64541\n## 8  2015 West Pilbara             WA    Men    107844.   22928\nsa3_income %>% \n  group_by(state, year) %>% \n  filter(income == min(income))## # A tibble: 48 × 6\n## # Groups:   state, year [48]\n##     year sa3_name                state gender income workers\n##    <dbl> <chr>                   <chr> <chr>   <dbl>   <dbl>\n##  1  2014 Cocos (Keeling) Islands NT    Men    32652.      45\n##  2  2011 Belconnen               ACT   Women  43235    22708\n##  3  2014 Belconnen               ACT   Women  48399.   22750\n##  4  2015 Belconnen               ACT   Women  48814.   20577\n##  5  2016 Belconnen               ACT   Women  50756.   22982\n##  6  2012 Gungahlin               ACT   Women  45241    13647\n##  7  2013 North Canberra          ACT   Women  45844.   11965\n##  8  2012 Great Lakes             NSW   Women  32590     4730\n##  9  2015 Lord Howe Island        NSW   Women  34173.      75\n## 10  2011 Lower Murray            NSW   Women  30800.    2122\n## # … with 38 more rows\nsa3_income %>% \n  group_by(state, year) %>% \n  filter(income == min(income)) %>% \n  ungroup()## # A tibble: 48 × 6\n##     year sa3_name                state gender income workers\n##    <dbl> <chr>                   <chr> <chr>   <dbl>   <dbl>\n##  1  2014 Cocos (Keeling) Islands NT    Men    32652.      45\n##  2  2011 Belconnen               ACT   Women  43235    22708\n##  3  2014 Belconnen               ACT   Women  48399.   22750\n##  4  2015 Belconnen               ACT   Women  48814.   20577\n##  5  2016 Belconnen               ACT   Women  50756.   22982\n##  6  2012 Gungahlin               ACT   Women  45241    13647\n##  7  2013 North Canberra          ACT   Women  45844.   11965\n##  8  2012 Great Lakes             NSW   Women  32590     4730\n##  9  2015 Lord Howe Island        NSW   Women  34173.      75\n## 10  2011 Lower Murray            NSW   Women  30800.    2122\n## # … with 38 more rows"},{"path":"data-transformation-with-dplyr.html","id":"edit-and-add-new-variables-with-mutate","chapter":"10 Data transformation with dplyr","heading":"10.5 Edit and add new variables with mutate()","text":"add new variables dataset, use mutate function. Like dplyr verbs, first argument mutate data. define variables using new_variable_name = x format, x can single number character string, simple operation function using current variables.add new variable sa3_income dataset shows log number workers:edit variable, redefine mutate. example, wanted take last two digits year:","code":"\nsa3_income %>% \n  mutate(log_workers = log(workers))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers log_workers\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>       <dbl>\n##  1  2011 Belconnen     ACT   Men    54105.   67774       11.1 \n##  2  2012 Belconnen     ACT   Men    56724.   69435       11.1 \n##  3  2013 Belconnen     ACT   Men    58918.   69697       11.2 \n##  4  2014 Belconnen     ACT   Men    60525.   68613       11.1 \n##  5  2015 Belconnen     ACT   Men    60964.   63428       11.1 \n##  6  2016 Belconnen     ACT   Men    63389.   69828       11.2 \n##  7  2011 Canberra East ACT   Men    53139.     666        6.50\n##  8  2012 Canberra East ACT   Men    54515.     647        6.47\n##  9  2013 Canberra East ACT   Men    58132.     641        6.46\n## 10  2014 Canberra East ACT   Men    56247.     561        6.33\n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(year = as.integer(year - 2000))## # A tibble: 4,019 × 6\n##     year sa3_name      state gender income workers\n##    <int> <chr>         <chr> <chr>   <dbl>   <dbl>\n##  1    11 Belconnen     ACT   Men    54105.   67774\n##  2    12 Belconnen     ACT   Men    56724.   69435\n##  3    13 Belconnen     ACT   Men    58918.   69697\n##  4    14 Belconnen     ACT   Men    60525.   68613\n##  5    15 Belconnen     ACT   Men    60964.   63428\n##  6    16 Belconnen     ACT   Men    63389.   69828\n##  7    11 Canberra East ACT   Men    53139.     666\n##  8    12 Canberra East ACT   Men    54515.     647\n##  9    13 Canberra East ACT   Men    58132.     641\n## 10    14 Canberra East ACT   Men    56247.     561\n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"using-if_else-or-case_when","chapter":"10 Data transformation with dplyr","heading":"10.5.1 Using if_else() or case_when()","text":"Sometimes want create new variable based sort condition. Like, number workers sa3 2,000, set new many_workers variable TRUE, set FALSE otherwise.kind operation can thought if_else: (condition), , otherwise .’s if_else() function . takes three arguments: condition, value condition true, value condition false.can use if_else() function creating new variables mutate command:reads:Take sa3_income dataset, add variable says ‘Many workers’ 2,000 workers, ‘many workers’ fewer--equal 2,000 workers.if_else function, take one conditional statement return something based . often don’t want binary; want true, true, true, etc.done nesting if_else statements:syntax can bit difficult read. can clearer way using case_when:case_when function takes first condition (LHS) applies value (RHS) true. moves next condition, . observation classified – eg observation 20,000 workers – ignored proceeding conditions.Ending case_when statement TRUE ~ [value] catch , apply RHS [value] observations meet explicit condition. example, end worker classification :Meaning, observation workers 20,000 10,000 5,000, assign value \"5,000 fewer workers\".Observations meet condition set NA:Like if_else, can provide one condition conditional statement:","code":"\nsa3_income %>% \n  mutate(many_workers = if_else(workers > 2000, \"Many workers\", \"Not many workers\"))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers many_workers    \n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>           \n##  1  2011 Belconnen     ACT   Men    54105.   67774 Many workers    \n##  2  2012 Belconnen     ACT   Men    56724.   69435 Many workers    \n##  3  2013 Belconnen     ACT   Men    58918.   69697 Many workers    \n##  4  2014 Belconnen     ACT   Men    60525.   68613 Many workers    \n##  5  2015 Belconnen     ACT   Men    60964.   63428 Many workers    \n##  6  2016 Belconnen     ACT   Men    63389.   69828 Many workers    \n##  7  2011 Canberra East ACT   Men    53139.     666 Not many workers\n##  8  2012 Canberra East ACT   Men    54515.     647 Not many workers\n##  9  2013 Canberra East ACT   Men    58132.     641 Not many workers\n## 10  2014 Canberra East ACT   Men    56247.     561 Not many workers\n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(worker_group = if_else(workers > 2000, \"More than 2000 workers\", \n                                if_else(workers > 1000, \"1000-2000 workers\",\n                                        if_else(workers > 500, \"500-1000 workers\",\n                                                \"500 workers or less\"))))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers worker_group          \n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>                 \n##  1  2011 Belconnen     ACT   Men    54105.   67774 More than 2000 workers\n##  2  2012 Belconnen     ACT   Men    56724.   69435 More than 2000 workers\n##  3  2013 Belconnen     ACT   Men    58918.   69697 More than 2000 workers\n##  4  2014 Belconnen     ACT   Men    60525.   68613 More than 2000 workers\n##  5  2015 Belconnen     ACT   Men    60964.   63428 More than 2000 workers\n##  6  2016 Belconnen     ACT   Men    63389.   69828 More than 2000 workers\n##  7  2011 Canberra East ACT   Men    53139.     666 500-1000 workers      \n##  8  2012 Canberra East ACT   Men    54515.     647 500-1000 workers      \n##  9  2013 Canberra East ACT   Men    58132.     641 500-1000 workers      \n## 10  2014 Canberra East ACT   Men    56247.     561 500-1000 workers      \n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(worker_group = case_when(\n    workers > 20000 ~ \"More than 20,000 workers\",\n    workers > 10000 ~ \"More than 10,000 workers\",\n    workers >  5000 ~ \"More than 5,000 workers\",\n    workers <= 5000 ~ \"5,000 or fewer workers\"\n  ))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers worker_group            \n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>                   \n##  1  2011 Belconnen     ACT   Men    54105.   67774 More than 20,000 workers\n##  2  2012 Belconnen     ACT   Men    56724.   69435 More than 20,000 workers\n##  3  2013 Belconnen     ACT   Men    58918.   69697 More than 20,000 workers\n##  4  2014 Belconnen     ACT   Men    60525.   68613 More than 20,000 workers\n##  5  2015 Belconnen     ACT   Men    60964.   63428 More than 20,000 workers\n##  6  2016 Belconnen     ACT   Men    63389.   69828 More than 20,000 workers\n##  7  2011 Canberra East ACT   Men    53139.     666 5,000 or fewer workers  \n##  8  2012 Canberra East ACT   Men    54515.     647 5,000 or fewer workers  \n##  9  2013 Canberra East ACT   Men    58132.     641 5,000 or fewer workers  \n## 10  2014 Canberra East ACT   Men    56247.     561 5,000 or fewer workers  \n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(worker_group = case_when(\n    workers > 20000 ~ \"More than 20,000 workers\",\n    workers > 10000 ~ \"More than 10,000 workers\",\n    workers >  5000 ~ \"More than 5,000 workers\",\n    TRUE ~ \"5,000 or fewer workers\"\n  ))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers worker_group            \n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>                   \n##  1  2011 Belconnen     ACT   Men    54105.   67774 More than 20,000 workers\n##  2  2012 Belconnen     ACT   Men    56724.   69435 More than 20,000 workers\n##  3  2013 Belconnen     ACT   Men    58918.   69697 More than 20,000 workers\n##  4  2014 Belconnen     ACT   Men    60525.   68613 More than 20,000 workers\n##  5  2015 Belconnen     ACT   Men    60964.   63428 More than 20,000 workers\n##  6  2016 Belconnen     ACT   Men    63389.   69828 More than 20,000 workers\n##  7  2011 Canberra East ACT   Men    53139.     666 5,000 or fewer workers  \n##  8  2012 Canberra East ACT   Men    54515.     647 5,000 or fewer workers  \n##  9  2013 Canberra East ACT   Men    58132.     641 5,000 or fewer workers  \n## 10  2014 Canberra East ACT   Men    56247.     561 5,000 or fewer workers  \n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(worker_group = case_when(\n    workers > 10e6 ~ \"More than 10 million workers\"\n  ))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers worker_group\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>       \n##  1  2011 Belconnen     ACT   Men    54105.   67774 <NA>        \n##  2  2012 Belconnen     ACT   Men    56724.   69435 <NA>        \n##  3  2013 Belconnen     ACT   Men    58918.   69697 <NA>        \n##  4  2014 Belconnen     ACT   Men    60525.   68613 <NA>        \n##  5  2015 Belconnen     ACT   Men    60964.   63428 <NA>        \n##  6  2016 Belconnen     ACT   Men    63389.   69828 <NA>        \n##  7  2011 Canberra East ACT   Men    53139.     666 <NA>        \n##  8  2012 Canberra East ACT   Men    54515.     647 <NA>        \n##  9  2013 Canberra East ACT   Men    58132.     641 <NA>        \n## 10  2014 Canberra East ACT   Men    56247.     561 <NA>        \n## # … with 4,009 more rows\nsa3_income %>% \n  mutate(women_group = case_when(\n    gender == \"Women\" & workers > 20000 ~ \"More than 20,000 women\",\n    gender == \"Women\" & workers > 10000 ~ \"More than 10,000 women\",\n    gender == \"Women\" & workers >  5000 ~ \"More than 5,000 women\",\n    gender == \"Women\"                  ~ \"5,000 or fewer women\",\n    TRUE ~ \"Men\"\n  ))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers women_group\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl> <chr>      \n##  1  2011 Belconnen     ACT   Men    54105.   67774 Men        \n##  2  2012 Belconnen     ACT   Men    56724.   69435 Men        \n##  3  2013 Belconnen     ACT   Men    58918.   69697 Men        \n##  4  2014 Belconnen     ACT   Men    60525.   68613 Men        \n##  5  2015 Belconnen     ACT   Men    60964.   63428 Men        \n##  6  2016 Belconnen     ACT   Men    63389.   69828 Men        \n##  7  2011 Canberra East ACT   Men    53139.     666 Men        \n##  8  2012 Canberra East ACT   Men    54515.     647 Men        \n##  9  2013 Canberra East ACT   Men    58132.     641 Men        \n## 10  2014 Canberra East ACT   Men    56247.     561 Men        \n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"grouped-mutates-with-group_by","chapter":"10 Data transformation with dplyr","heading":"10.5.2 Grouped mutates with group_by()","text":"Like filtering, can add edit variables grouped data. example, get average number workers SA3 6 years:, mean() function applied separately unique group sa3_name gender, taking one average women Queanbeyan, one average men Queanbeyan, .Grouping dataset prohibit operations don’t utilise grouping. example, get year’s workers relative SA3/gender average call mutate:See data remains grouped mutate. can explicitly ungroup() afterwards:","code":"\nsa3_income %>% \n  group_by(sa3_name, gender) %>% \n  mutate(av_workers = mean(workers))## # A tibble: 4,019 × 7\n## # Groups:   sa3_name, gender [672]\n##     year sa3_name      state gender income workers av_workers\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>      <dbl>\n##  1  2011 Belconnen     ACT   Men    54105.   67774     68129.\n##  2  2012 Belconnen     ACT   Men    56724.   69435     68129.\n##  3  2013 Belconnen     ACT   Men    58918.   69697     68129.\n##  4  2014 Belconnen     ACT   Men    60525.   68613     68129.\n##  5  2015 Belconnen     ACT   Men    60964.   63428     68129.\n##  6  2016 Belconnen     ACT   Men    63389.   69828     68129.\n##  7  2011 Canberra East ACT   Men    53139.     666       641.\n##  8  2012 Canberra East ACT   Men    54515.     647       641.\n##  9  2013 Canberra East ACT   Men    58132.     641       641.\n## 10  2014 Canberra East ACT   Men    56247.     561       641.\n## # … with 4,009 more rows\nsa3_income %>% \n  group_by(sa3_name, gender) %>% \n  mutate(av_workers = mean(workers),\n         worker_diff = workers / av_workers)## # A tibble: 4,019 × 8\n## # Groups:   sa3_name, gender [672]\n##     year sa3_name      state gender income workers av_workers worker_diff\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>      <dbl>       <dbl>\n##  1  2011 Belconnen     ACT   Men    54105.   67774     68129.       0.995\n##  2  2012 Belconnen     ACT   Men    56724.   69435     68129.       1.02 \n##  3  2013 Belconnen     ACT   Men    58918.   69697     68129.       1.02 \n##  4  2014 Belconnen     ACT   Men    60525.   68613     68129.       1.01 \n##  5  2015 Belconnen     ACT   Men    60964.   63428     68129.       0.931\n##  6  2016 Belconnen     ACT   Men    63389.   69828     68129.       1.02 \n##  7  2011 Canberra East ACT   Men    53139.     666       641.       1.04 \n##  8  2012 Canberra East ACT   Men    54515.     647       641.       1.01 \n##  9  2013 Canberra East ACT   Men    58132.     641       641.       1.00 \n## 10  2014 Canberra East ACT   Men    56247.     561       641.       0.875\n## # … with 4,009 more rows\nsa3_income %>% \n  group_by(sa3_name, gender) %>% \n  mutate(av_workers = mean(workers),\n         worker_diff = workers / av_workers) %>% \n  ungroup()## # A tibble: 4,019 × 8\n##     year sa3_name      state gender income workers av_workers worker_diff\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>      <dbl>       <dbl>\n##  1  2011 Belconnen     ACT   Men    54105.   67774     68129.       0.995\n##  2  2012 Belconnen     ACT   Men    56724.   69435     68129.       1.02 \n##  3  2013 Belconnen     ACT   Men    58918.   69697     68129.       1.02 \n##  4  2014 Belconnen     ACT   Men    60525.   68613     68129.       1.01 \n##  5  2015 Belconnen     ACT   Men    60964.   63428     68129.       0.931\n##  6  2016 Belconnen     ACT   Men    63389.   69828     68129.       1.02 \n##  7  2011 Canberra East ACT   Men    53139.     666       641.       1.04 \n##  8  2012 Canberra East ACT   Men    54515.     647       641.       1.01 \n##  9  2013 Canberra East ACT   Men    58132.     641       641.       1.00 \n## 10  2014 Canberra East ACT   Men    56247.     561       641.       0.875\n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"summarise-data-with-summarise","chapter":"10 Data transformation with dplyr","heading":"10.6 Summarise data with summarise()","text":"Summarising useful way assess present data. summarise function collapses data single row, performing operation(s) provide:Summarising usually useful combined group_by.","code":"\nsa3_income %>% \n  summarise(mean_income = mean(income),\n            total_workers = sum(workers))  # this is a silly statistic## # A tibble: 1 × 2\n##   mean_income total_workers\n##         <dbl>         <dbl>\n## 1      50272.     117002608"},{"path":"data-transformation-with-dplyr.html","id":"grouped-summaries-with-group_by","chapter":"10 Data transformation with dplyr","heading":"10.6.1 Grouped summaries with group_by()","text":"Grouped summaries can help change detail data. original sa3_income data, unique workers observation year, SA3 gender. wanted aggregate information see total number workers year SA3:summarise function, dataset grouping remains reduced one – right-hand-side grouping lost. enables common combination find proportion group. example, youCommon functions use summariseGrouped summaries generate summary statistics grouped data. uses summarise function, preceded group_by. example, want find average income women men:total workers year state gender:","code":"\nsa3_income %>% \n  group_by(year, sa3_name) %>% \n  summarise(workers = sum(workers))## `summarise()` has grouped output by 'year'. You can override using the `.groups` argument.## # A tibble: 2,010 × 3\n## # Groups:   year [6]\n##     year sa3_name                             workers\n##    <dbl> <chr>                                  <dbl>\n##  1  2011 Adelaide City                          18048\n##  2  2011 Adelaide Hills                         59794\n##  3  2011 Albany                                 43811\n##  4  2011 Albury                                 50490\n##  5  2011 Alice Springs                          31563\n##  6  2011 Armadale                               56088\n##  7  2011 Armidale                               27957\n##  8  2011 Auburn                                 57298\n##  9  2011 Augusta - Margaret River - Busselton   35852\n## 10  2011 Bald Hills - Everton Park              36273\n## # … with 2,000 more rows\nsa3_income %>% \n  group_by(gender) %>% \n  summarise(mean_income = mean(income))## # A tibble: 2 × 2\n##   gender mean_income\n##   <chr>        <dbl>\n## 1 Men         58780.\n## 2 Women       41760.\nsa3_income %>% \n  group_by(year, state, gender) %>% \n  summarise(workers = sum(workers))## `summarise()` has grouped output by 'year', 'state'. You can override using the `.groups` argument.## # A tibble: 96 × 4\n## # Groups:   year, state [48]\n##     year state gender workers\n##    <dbl> <chr> <chr>    <dbl>\n##  1  2011 ACT   Men     265281\n##  2  2011 ACT   Women    88632\n##  3  2011 NSW   Men    4438272\n##  4  2011 NSW   Women  1415914\n##  5  2011 NT    Men     140946\n##  6  2011 NT    Women    44413\n##  7  2011 Qld   Men    2859150\n##  8  2011 Qld   Women   918841\n##  9  2011 SA    Men     997160\n## 10  2011 SA    Women   325980\n## # … with 86 more rows"},{"path":"data-transformation-with-dplyr.html","id":"arrange-with-arrange","chapter":"10 Data transformation with dplyr","heading":"10.7 Arrange with arrange()","text":"‘doesn’t add subtract data’Sorting data one way another can useful. Use arrange function sort data provided variable(s). Like select, can use minus sign - reverse order.example, find areas 2016 least workers:can provide one variable. sort data first state , within state, workers (ie sorting negative workers):","code":"\nsa3_income %>%\n  filter(year == 2016) %>% \n  arrange(workers)## # A tibble: 670 × 6\n##     year sa3_name                  state gender income workers\n##    <dbl> <chr>                     <chr> <chr>   <dbl>   <dbl>\n##  1  2016 Lord Howe Island          NSW   Women  37944       74\n##  2  2016 Urriarra - Namadgi        ACT   Women  86672.      90\n##  3  2016 Christmas Island          NT    Women  57640      141\n##  4  2016 Canberra East             ACT   Women  52091.     182\n##  5  2016 Lord Howe Island          NSW   Men    40292      255\n##  6  2016 Urriarra - Namadgi        ACT   Men    86747.     296\n##  7  2016 Christmas Island          NT    Men    84474.     621\n##  8  2016 Barkly                    NT    Women  52552.     704\n##  9  2016 Canberra East             ACT   Men    58035.     711\n## 10  2016 Daly - Tiwi - West Arnhem NT    Women  50096.    1075\n## # … with 660 more rows\nsa3_income %>%\n  filter(year == 2016) %>% \n  arrange(state, -workers)## # A tibble: 670 × 6\n##     year sa3_name       state gender income workers\n##    <dbl> <chr>          <chr> <chr>   <dbl>   <dbl>\n##  1  2016 Belconnen      ACT   Men    63389.   69828\n##  2  2016 Tuggeranong    ACT   Men    66921.   65248\n##  3  2016 Gungahlin      ACT   Men    66714.   55176\n##  4  2016 North Canberra ACT   Men    62258.   37481\n##  5  2016 Woden Valley   ACT   Men    66853.   24690\n##  6  2016 Belconnen      ACT   Women  50756.   22982\n##  7  2016 Tuggeranong    ACT   Women  52058.   21949\n##  8  2016 South Canberra ACT   Men    72437.   20998\n##  9  2016 Gungahlin      ACT   Women  50908.   18134\n## 10  2016 Weston Creek   ACT   Men    67242.   15500\n## # … with 660 more rows"},{"path":"data-transformation-with-dplyr.html","id":"lead-and-lag-functions-with-arrange","chapter":"10 Data transformation with dplyr","heading":"10.7.1 lead and lag functions with arrange","text":"data arranged way want lets use lead (looking forward) lag (looking backward) functions.lead lag functions take variable requried argument. default number lags leads 1, can changed second argument. example:wanted see growth rate income time, arrange group_by data creating income_growth variable income / lag(income).","code":"\nsa3_income %>%\n  mutate(last_workers = lag(workers))## # A tibble: 4,019 × 7\n##     year sa3_name      state gender income workers last_workers\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>        <dbl>\n##  1  2011 Belconnen     ACT   Men    54105.   67774           NA\n##  2  2012 Belconnen     ACT   Men    56724.   69435        67774\n##  3  2013 Belconnen     ACT   Men    58918.   69697        69435\n##  4  2014 Belconnen     ACT   Men    60525.   68613        69697\n##  5  2015 Belconnen     ACT   Men    60964.   63428        68613\n##  6  2016 Belconnen     ACT   Men    63389.   69828        63428\n##  7  2011 Canberra East ACT   Men    53139.     666        69828\n##  8  2012 Canberra East ACT   Men    54515.     647          666\n##  9  2013 Canberra East ACT   Men    58132.     641          647\n## 10  2014 Canberra East ACT   Men    56247.     561          641\n## # … with 4,009 more rows\nsa3_income %>%\n  arrange(sa3_name, gender, year) %>% \n  group_by(sa3_name, gender) %>% \n  mutate(income_growth = income / lag(income) - 1)## # A tibble: 4,019 × 7\n## # Groups:   sa3_name, gender [672]\n##     year sa3_name      state gender income workers income_growth\n##    <dbl> <chr>         <chr> <chr>   <dbl>   <dbl>         <dbl>\n##  1  2011 Adelaide City SA    Men    48760.   13737       NA     \n##  2  2012 Adelaide City SA    Men    49974.   13730        0.0249\n##  3  2013 Adelaide City SA    Men    52975.   13955        0.0601\n##  4  2014 Adelaide City SA    Men    54818.   13782        0.0348\n##  5  2015 Adelaide City SA    Men    54185.   13930       -0.0115\n##  6  2016 Adelaide City SA    Men    56689.   15300        0.0462\n##  7  2011 Adelaide City SA    Women  38359.    4311       NA     \n##  8  2012 Adelaide City SA    Women  40409.    4219        0.0534\n##  9  2013 Adelaide City SA    Women  41287.    4281        0.0217\n## 10  2014 Adelaide City SA    Women  42872     4200        0.0384\n## # … with 4,009 more rows"},{"path":"data-transformation-with-dplyr.html","id":"putting-it-all-together","chapter":"10 Data transformation with dplyr","heading":"10.8 Putting it all together","text":"often use combination dplyr functions get data shape.example, say want get total workers total income state year gender. start sa3_income dataset, filter year 2016, create new variable equal workers * income, group year, state gender summarise get statistics want. pipes, look something like:say want see annual growth rate female workers SA3 highest female income. filter keep women, group SA3, get highest income SA3, ungroup filter keep SA3 highest income, arrange year get annual worker growth:","code":"\nsa3_income %>% \n  filter(year == 2016) %>% \n  mutate(total_income = workers * income) %>% \n  group_by(year, state, gender) %>% \n  summarise(total_workers = sum(workers),\n            mean_income = mean(income),\n            total_income = sum(total_income))## `summarise()` has grouped output by 'year', 'state'. You can override using the `.groups` argument.## # A tibble: 16 × 6\n## # Groups:   year, state [8]\n##     year state gender total_workers mean_income  total_income\n##    <dbl> <chr> <chr>          <dbl>       <dbl>         <dbl>\n##  1  2016 ACT   Men           293558      67901.  19336462167.\n##  2  2016 ACT   Women          97565      58222.   5180698359.\n##  3  2016 NSW   Men          4952353      62207. 314145522637 \n##  4  2016 NSW   Women        1575308      45003.  72633515399.\n##  5  2016 NT    Men           157954      70961.  11488404531.\n##  6  2016 NT    Women          48107      54143.   2607187917.\n##  7  2016 Qld   Men          3110067      61794. 194644704512.\n##  8  2016 Qld   Women         994436      44251.  44474845486.\n##  9  2016 SA    Men          1041747      58602.  60710695691.\n## 10  2016 SA    Women         340699      43034.  14705553952 \n## 11  2016 Tas   Men           316727      54427.  17485898880.\n## 12  2016 Tas   Women         104040      40685.   4305640148.\n## 13  2016 Vic   Men          3926751      59814. 236830412049.\n## 14  2016 Vic   Women        1264225      42816.  55273320473.\n## 15  2016 WA    Men          1756314      72582. 127679046129.\n## 16  2016 WA    Women         540767      48537.  26179412110.\nsa3_income %>% \n  filter(gender == \"Women\") %>% \n  group_by(sa3_name) %>% \n  mutate(highest_income = max(income)) %>% \n  ungroup() %>% \n  filter(highest_income == max(highest_income)) %>% \n  arrange(year) %>% \n  mutate(worker_growth = workers / lag(workers) - 1)## # A tibble: 6 × 8\n##    year sa3_name           state gender income workers highest_income worker_growth\n##   <dbl> <chr>              <chr> <chr>   <dbl>   <dbl>          <dbl>         <dbl>\n## 1  2011 Urriarra - Namadgi ACT   Women  48525.      84         86672.        NA    \n## 2  2012 Urriarra - Namadgi ACT   Women  51648.      96         86672.         0.143\n## 3  2013 Urriarra - Namadgi ACT   Women  61858.     124         86672.         0.292\n## 4  2014 Urriarra - Namadgi ACT   Women  72980.      99         86672.        -0.202\n## 5  2015 Urriarra - Namadgi ACT   Women  68534.      72         86672.        -0.273\n## 6  2016 Urriarra - Namadgi ACT   Women  86672.      90         86672.         0.25"},{"path":"data-transformation-with-dplyr.html","id":"joining-datasets-with-left_join","chapter":"10 Data transformation with dplyr","heading":"10.9 Joining datasets with left_join()","text":"Joining one dataset another incredibly useful can difficult concept grasp. concept joining one dataset another well introduced Chapter 13 R Data Science:’s rare data analysis involves single table data. Typically many tables data, must combine answer questions ’re interested . Collectively, multiple tables data called relational data relations, just individual datasets, important.dplyr package ‘Join two tbls together’ page provides comprehensive summary join types. explore key use joins line work – left_join – .‘left’ join takes main dataset, adds variables new dataset based matching condition ’s unhelpful, fix. observation new dataset found main dataset, ignored.probably easier show example. Say income percentiles SA3 year different data source:","code":"\nsa3_percentiles <- read_csv(\"data/sa3_percentiles.csv\")## Rows: 2010 Columns: 3## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): sa3_name\n## dbl (2): year, sa3_income_percentile## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"analysis.html","id":"analysis","chapter":"11 Analysis","heading":"11 Analysis","text":"","code":""},{"path":"data-visualisation.html","id":"data-visualisation","chapter":"12 Data Visualisation","heading":"12 Data Visualisation","text":"chapter explores data visualisation broadly, ‘’ data visualisation R specifically.next chapter – Visualisation Cookbook – gives practical advice charts might want create.","code":""},{"path":"data-visualisation.html","id":"introduction-to-data-visualisation","chapter":"12 Data Visualisation","heading":"12.1 Introduction to data visualisation","text":"can use data visualisation examine explore data, present finding audience. elements important.start using dataset, look .24 Plot histograms variables--interest spot outliers. Explore correlations variables scatter plots lines--best-fit. Check many observations particular groups bar charts. Identify variables missing coded-missing values. Use faceting explore differences groups, interactively non-static plots.exploratory plots just team. don’t need perfectly labelled, right size, Grattan palette, particularly interesting.\n’re built used help team explore data.\nprocess, can become confident data think .choose present visualisation reader, make decisions can see. need highlight omit particular things help better understand message presenting.requires important technical decisions: data use, ‘stat’ present — show every data point, show distribution function, show average median? — scale — raw numbers, log scale, proportion total?.also requires aesthetic decisions. colours Grattan palette work best? labels placed phrased succinctly convey meaning? data points represented lines, bars, dots, balloons, shades colour?decisions need made two things mind:Rigour, accuracy, legitimacy: chart needs honest.reader: chart needs help reader understand something, must convince pay attention.margins, sometimes two ideas can conflict. Maybe 70-word definition middle chart improve technical accuracy, confuse average reader reduce chart’s impact.Similarly, bar chart often safest way display data. Like prose, charts need designed interested teenager. need earn interest. reader seen four similar bar charts row stopped paying attention fifth, point loses punch.25The way design charts – much like writing – always honest, clear engaging reader.chapter shows can R. starts ‘grammar graphics’ concepts package called ggplot, explains make charts ‘Grattan-y.’ next chapter gives --use --make particular charts.","code":""},{"path":"data-visualisation.html","id":"set-up-and-packages-1","chapter":"12 Data Visualisation","heading":"12.2 Set-up and packages","text":"section uses package ggplot2 visualise data, dplyr functions manipulate data. packages loaded tidyverse. scales package helps labelling axes.grattantheme package used make charts look Grattan-y. absmapsdata package used help make maps.charts chapter, ’ll use sa3_income data summarised .26 long dataset containing median income number workers SA3, occupation gender 2010 2015. also create professionals subset includes people professional occupations 2015:haven’t already, download sa3_income.csv file data folder:read using read_csv function:","code":"\nlibrary(tidyverse)\nlibrary(grattantheme)\nlibrary(ggrepel)\nlibrary(scales)\ndownload.file(url = \"https://raw.githubusercontent.com/grattan/R_at_Grattan/master/data/sa3_income.csv\",\n              destfile = \"data/sa3_income.csv\")\nsa3_income <- read_csv(\"data/sa3_income.csv\")\n\nprofessionals <- sa3_income %>% \n  select(-sa4_name, -gcc_name) %>% \n  filter(year == 2015,\n         occupation == \"Professionals\",\n         !is.na(median_income),\n         !gender == \"Persons\") \n\n# Show the first six rows of the new dataset\nhead(professionals)## # A tibble: 6 × 14\n##     sa3 sa3_name   sa3_sqkm sa3_income_perce… state occupation  occ_short prof  \n##   <dbl> <chr>         <dbl>             <dbl> <chr> <chr>       <chr>     <chr> \n## 1 10102 Queanbeyan    6511.                74 NSW   Profession… Professi… Profe…\n## 2 10102 Queanbeyan    6511.                74 NSW   Profession… Professi… Profe…\n## 3 10102 Queanbeyan    6511.                74 NSW   Profession… Professi… Profe…\n## 4 10103 Snowy Mou…   14283.                 7 NSW   Profession… Professi… Profe…\n## 5 10103 Snowy Mou…   14283.                 7 NSW   Profession… Professi… Profe…\n## 6 10103 Snowy Mou…   14283.                 7 NSW   Profession… Professi… Profe…\n## # … with 6 more variables: gender <chr>, year <dbl>, median_income <dbl>,\n## #   average_income <dbl>, total_income <dbl>, workers <dbl>"},{"path":"data-visualisation.html","id":"concepts","chapter":"12 Data Visualisation","heading":"12.3 Concepts","text":"ggplot2 package based grammar graphics. …main ingredients ggplot chart :Data: data plotted.\ne.g. data\ne.g. dataAesthetics: variables linked chart elements.\ne.g. aes(x = population, y = age) connect population variable x axis, age variable y axis.\ne.g. aes(x = population, y = age) connect population variable x axis, age variable y axis.Geoms: data plotted.\ne.g. geom_point() produce scatter plot, geom_col produce column chart, geom_line() produce line chart.\ne.g. geom_point() produce scatter plot, geom_col produce column chart, geom_line() produce line chart.plot make made three elements. full list standard geoms listed tidyverse documentation.ggplot also ‘cheat sheet’ contains many often-used elements plot, can download .example, can plot column chart passing sa3_income dataset ggplot() (“make chart data”). completes first step – data – produces empty plot:Next, set aes (aesthetics) x = state (“make x-axis represent state”), y = pop (“y-axis represent population”), fill = year (“fill colour represents year”). Now ggplot knows things go.just plot , ’ll see ggplot knows little bit ’re trying . states x-axis range populations y-axis:Now ggplot knows things go, needs plot chart. use geoms. Tell ggplot take things knows plot column chart using geom_col:Great! couple quick things can make chart bit clearer. points group year, probably don’t need. filter data pass ggplot just include 2015: filter(year == 2015). still lots overlapping points, set opacity one alpha = 0.5. workers x-axis can changed log scale scale_x_log10.looks bit better. following sections chapter cover broad range charts designs, use building-blocks data, aes, geom.rest chapter explore:Exploratory data visualisationGrattanising charts choosing coloursSaving charts according Grattan templatesMaking bar, line, scatter distribution plotsMaking maps interactive chartsAdding chart labels","code":"\nprofessionals %>% \n        ggplot()\nprofessionals %>% \n        ggplot(aes(x = workers,\n                   y = median_income,\n                   colour = gender))\nprofessionals %>%\n        ggplot(aes(x = workers,\n                   y = median_income,\n                   colour = gender)) + \n        geom_point()\nprofessionals %>% \n        ggplot(aes(x = workers,\n                   y = median_income,\n                   colour = gender)) + \n        geom_point(alpha = .5) + \n        scale_x_log10()"},{"path":"data-visualisation.html","id":"exploratory-data-visualisation","chapter":"12 Data Visualisation","heading":"12.4 Exploratory data visualisation","text":"Plotting data early analysis stage can help quickly identify outliers, oddities, things don’t look quite right.","code":""},{"path":"data-visualisation.html","id":"making-grattan-y-charts","chapter":"12 Data Visualisation","heading":"12.5 Making Grattan-y charts","text":"grattantheme package contains functions help Grattanise charts. hosted : https://github.com/grattan/grattanthemeYou can install remotes::install_github package:key functions grattantheme :theme_grattan: set size, font colour defaults adhere Grattan style guide.grattan_y_continuous: sets right defaults continuous y-axis.grattan_colour_continuous: pulls colours Grattan colour palette colour aesthetics.grattan_fill_continuous: pulls colours Grattan colour palette fill aesthetics.grattan_save: save function exports charts correct report presentation dimensions.section run examples Grattanising charts. ggplot functions explored detail next section.","code":"\ninstall.packages(\"remotes\")\nremotes::install_github(\"grattan/grattantheme\")"},{"path":"data-visualisation.html","id":"making-grattan-charts","chapter":"12 Data Visualisation","heading":"12.5.1 Making Grattan charts","text":"Start scatterplot, similar one made :Let’s make Grattany. First, add theme_grattan plot:use grattan_y_continuous adjust y-axis. takes arguments standard scale_y_continuous function, Grattan defaults built . Use set labels dollars (scales::dollar()) give y-axis breathing room (starting $50,000 rather minimum point).\nAlso add scale_x_log10 make x-axis log10 scale, telling format labels numbers commas (using scales::comma()).27To define colour colours, use grattan_colour_manual number colours need (two, case):Nice chart! Now can save share world.","code":"\nbase_chart <- professionals %>% \n        ggplot(aes(x = workers,\n                   y = median_income,\n                   colour = gender)) + \n        geom_point(alpha = .5) + \n        labs(title = \"More professionals, the more they earn\",\n             subtitle = \"Median income of professional workers in SA3s\",\n             x = \"Number of professional workers\",\n             y = \"Median income\",\n             caption = \"Source: ABS Estimates of Personal Income for Small Areas, 2011-2016\")\n\nbase_chart\nbase_chart +\n        theme_grattan(chart_type = \"scatter\")\nbase_chart +\n        theme_grattan(chart_type = \"scatter\") +\n        grattan_y_continuous(labels = dollar, limits = c(50e3, NA)) +\n        scale_x_log10(labels = comma) \nprof_chart <- base_chart +\n        theme_grattan(chart_type = \"scatter\") +\n        grattan_y_continuous(labels = dollar, limits = c(50e3, NA)) +\n        scale_x_log10(labels = comma) +\n        grattan_colour_manual(2) \n\nprof_chart"},{"path":"data-visualisation.html","id":"saving-grattan-charts","chapter":"12 Data Visualisation","heading":"12.5.2 Saving Grattan charts","text":"grattan_save function saves charts according Grattan templates. takes arguments:filename: path, name file-type saved chart. eg: \"atlas/professionals_chart.pdf\".object: R object want save. eg: prof_chart. left blank, grabs last chart displayed.type: Grattan template used. one :\n\"normal\" default. Use normal Grattan report charts, paste 4:3 PowerPoint slide. Width: 22.2cm, height: 14.5cm.\n\"normal_169\" useful pasting 16:9 format Grattan PowerPoint slide. Width: 30cm, height: 14.5cm.\n\"tiny\" Fills width column Grattan report, shorter usual. Width: 22.2cm, height: 11.1cm.\n\"wholecolumn\" Takes whole column Grattan report. Width: 22.2cm, height: 22.2cm.\n\"fullpage\" Fills whole page Grattan report. Width: 44.3cm, height: 22.2cm.\n\"fullslide\" Creates image looks like 4:3 Grattan PowerPoint slide, complete logo. Width: 25.4cm, height: 19.0cm.\n\"fullslide_169\" Creates` image looks like 16:9 Grattan PowerPoint slide, complete logo. Use drop standard presentations. Width: 33.9cm, height: 19.0cm\n\"blog\" Creates 4:3 image looks like Grattan PowerPoint slide, less border whitespace ‘fullslide.’\"\n\"fullslide_44\" Creates image looks like 4:4 Grattan PowerPoint slide. may useful taller charts Grattan blog; useful purpose. Width: 25.4cm, height: 25.4cm.\nSet type = \"\" save chart available sizes.\n\"normal\" default. Use normal Grattan report charts, paste 4:3 PowerPoint slide. Width: 22.2cm, height: 14.5cm.\"normal_169\" useful pasting 16:9 format Grattan PowerPoint slide. Width: 30cm, height: 14.5cm.\"tiny\" Fills width column Grattan report, shorter usual. Width: 22.2cm, height: 11.1cm.\"wholecolumn\" Takes whole column Grattan report. Width: 22.2cm, height: 22.2cm.\"fullpage\" Fills whole page Grattan report. Width: 44.3cm, height: 22.2cm.\"fullslide\" Creates image looks like 4:3 Grattan PowerPoint slide, complete logo. Width: 25.4cm, height: 19.0cm.\"fullslide_169\" Creates` image looks like 16:9 Grattan PowerPoint slide, complete logo. Use drop standard presentations. Width: 33.9cm, height: 19.0cm\"blog\" Creates 4:3 image looks like Grattan PowerPoint slide, less border whitespace ‘fullslide.’\"\"fullslide_44\" Creates image looks like 4:4 Grattan PowerPoint slide. may useful taller charts Grattan blog; useful purpose. Width: 25.4cm, height: 25.4cm.Set type = \"\" save chart available sizes.height: override height set type. can useful really long charts blogposts.save_data: exports csv file containing data used chart.force_labs: override removal labels particular type. eg force_labs = TRUE keep y-axis label.save prof_chart plot created whole-column chart report:save presentation slide instead, use type = \"fullslide\":, want emphasise point really tall chart blogpost, can use type = \"blog\" adjust height 50cm. Also note blog, save png file:’s ! following sections go detail different chart types R, ’ll mostly use basic grattantheme formatting ’ve used .","code":"\ngrattan_save(\"atlas/professionals_chart_report.pdf\", prof_chart, type = \"wholecolumn\")\ngrattan_save(\"atlas/professionals_chart_presentation.pdf\", prof_chart, type = \"fullslide\")\ngrattan_save(\"atlas/professionals_chart_blog.png\", prof_chart, \n             type = \"blog\", height = 30)"},{"path":"data-visualisation.html","id":"adding-labels","chapter":"12 Data Visualisation","heading":"12.6 Adding labels","text":"Labels can bit finicky – especially compared labelling charts visually PowerPoint. …Labels can done two broad ways:Labelling every single data point chart. Grattan charts rarely .Labelling data points chart. label Grattan charts: label item group let reader join dots.’ll look first approach can get feel labelling geoms – geom_label geom_text (useful extensions) – work. won’t pretty.Great! looks terrible. geom_text labelling individual point told . Just like geom_point, takes x y aesthetics observation, plots label location. just want label one points female one male., can create new dataset just contains one observation . , ’re filtering dataset include female/male observations people:tell geom_text look dataset:Okay, bad. labels go chart. fix shortening labels either inside label_data:adjust label values directly inside aesthetics call. Note means provide vector length number observations data (length two, case).freedom labels placed, can create dataset . Add x y values labels, label names.28[cover annotate]","code":"\nprof_chart +\n  geom_text(aes(label = gender))\nlabel_data <- professionals %>% \n  group_by(gender) %>% \n  filter(workers == max(workers)) %>% \n  ungroup()\n\nlabel_data## # A tibble: 2 × 14\n##     sa3 sa3_name   sa3_sqkm sa3_income_perce… state occupation  occ_short prof  \n##   <dbl> <chr>         <dbl>             <dbl> <chr> <chr>       <chr>     <chr> \n## 1 11703 Sydney In…     25.1                84 NSW   Profession… Professi… Profe…\n## 2 11703 Sydney In…     25.1                84 NSW   Profession… Professi… Profe…\n## # … with 6 more variables: gender <chr>, year <dbl>, median_income <dbl>,\n## #   average_income <dbl>, total_income <dbl>, workers <dbl>\nprof_chart +\n  geom_text(data = label_data,\n            aes(label = gender))\nlabel_data_short <- label_data %>% \n  mutate(gender_label = if_else(gender == \"Females\", \n                             \"Women\", \n                             \"Men\"))\n\nprof_chart +\n  geom_text(data = label_data_short,\n            aes(label = gender_label))\nprof_chart +\n  geom_text(data = label_data,\n            aes(label = c(\"Female\", \"Male\")))\nself_label <- tribble(\n  ~gender, ~workers,   ~median_income,\n  \"Women\",    23000,            55000,\n  \"Men\",      23000,           110000)\n\n\nself_label## # A tibble: 2 × 3\n##   gender workers median_income\n##   <chr>    <dbl>         <dbl>\n## 1 Women    23000         55000\n## 2 Men      23000        110000\nprof_chart +\n  geom_text(data = self_label,\n            aes(label = gender), \n            hjust = 1)"},{"path":"chart-cookbook.html","id":"chart-cookbook","chapter":"13 Chart cookbook","heading":"13 Chart cookbook","text":"section takes often-used chart types.","code":""},{"path":"chart-cookbook.html","id":"set-up-1","chapter":"13 Chart cookbook","heading":"13.1 Set up","text":"sa3_income dataset used key examples chapter.29 long dataset ABS contains median income number workers Statistical Area 3, occupation sex 2010 2016.haven’t already, download sa3_income.csv file data folder:read using read_csv function, removing rows missing average median income values:","code":"\nlibrary(tidyverse)\nlibrary(grattantheme)\nlibrary(ggrepel)\nlibrary(strayr)\nlibrary(sf)\nlibrary(scales)\nlibrary(janitor)\n# this might be hairy; should get `grattools` happening:\nlibrary(grattan)\ndownload.file(url = \"https://raw.githubusercontent.com/grattan/R_at_Grattan/master/data/sa3_income.csv\",\n              destfile = \"data/sa3_income.csv\")\nsa3_income <- read_csv(\"data/sa3_income.csv\") %>% \n  filter(!is.na(median_income),\n         !is.na(average_income))## Rows: 47899 Columns: 16## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (8): sa3_name, sa4_name, gcc_name, state, occupation, occ_short, prof, g...\n## dbl (8): sa3, sa3_sqkm, sa3_income_percentile, year, median_income, average_...## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nhead(sa3_income)## # A tibble: 6 × 16\n##     sa3 sa3_name   sa3_sqkm sa3_income_perce… sa4_name gcc_name state occupation\n##   <dbl> <chr>         <dbl>             <dbl> <chr>    <chr>    <chr> <chr>     \n## 1 10102 Queanbeyan    6511.                80 Capital… Rest of… NSW   Clerical …\n## 2 10102 Queanbeyan    6511.                76 Capital… Rest of… NSW   Clerical …\n## 3 10102 Queanbeyan    6511.                78 Capital… Rest of… NSW   Clerical …\n## 4 10102 Queanbeyan    6511.                76 Capital… Rest of… NSW   Clerical …\n## 5 10102 Queanbeyan    6511.                74 Capital… Rest of… NSW   Clerical …\n## 6 10102 Queanbeyan    6511.                79 Capital… Rest of… NSW   Clerical …\n## # … with 8 more variables: occ_short <chr>, prof <chr>, gender <chr>,\n## #   year <dbl>, median_income <dbl>, average_income <dbl>, total_income <dbl>,\n## #   workers <dbl>"},{"path":"chart-cookbook.html","id":"bar-charts","chapter":"13 Chart cookbook","heading":"13.2 Bar charts","text":"Bar charts made geom_bar geom_col. Creating bar chart look something like :two key arguments: stat position.First, stat defines kind operation function dataset plotting. options :\"count\", default: count number observations particular group, plot number. useful ’re using microdata. case, need y aesthetic.\"sum\": sum values y aesthetic.\"identity\": directly report values y aesthetic. PowerPoint Excel charts work.can use geom_col instead, shortcut geom_bar(stat = \"identity).Second, position, dictates multiple bars occupying x-axis position positioned. options :\"stack\", default: bars group stacked atop one another.\"dodge\": bars group positioned next one another.\"fill\": bars group stacked fill 100 per cent.","code":"ggplot(data = <data>) + \n  geom_bar(aes(x = <xvar>, y = <yvar>),\n     stat = <STAT>, \n     position = <POSITION>\n  )"},{"path":"chart-cookbook.html","id":"simple-bar-plot","chapter":"13 Chart cookbook","heading":"13.2.1 Simple bar plot","text":"section create following vertical bar plot showing number workers state 2016:First, create data want plot.Looks smashing: one observation (row) state want plot, value number workers.Now pass nice, simple table ggplot add aesthetics x represents state, y represents workers. , dataset contains actual numbers want chart, can plot data geom_col:30Make Grattany adjusting general theme defaults theme_grattan, use grattan_y_continuous change y-axis. Use labels formatted commas (rather scientific notation) adding labels = comma.order states number workers, can tell x aesthetic want reorder state variable workers:can probably drop x-axis label – people understand ’re states without explicitly saying – add title subtitle labs:Looks magnificent! Now can export full-slide Grattan chart using grattan_save:","code":"\ndata <- sa3_income %>% \n  filter(year == 2016) %>% \n  group_by(state) %>% \n  summarise(workers = sum(workers))\n\ndata## # A tibble: 8 × 2\n##   state workers\n##   <chr>   <dbl>\n## 1 ACT    386989\n## 2 NSW   6527661\n## 3 NT     206061\n## 4 Qld   4104503\n## 5 SA    1382446\n## 6 Tas    420767\n## 7 Vic   5190976\n## 8 WA    2297081\ndata %>% \n  ggplot(aes(x = state,\n             y = workers)) + \n  geom_col()\ndata %>% \n  ggplot(aes(x = state,\n             y = workers)) + \n  geom_col() + \n  theme_grattan() + \n  grattan_y_continuous(labels = comma)\ndata %>% \n  ggplot(aes(x = reorder(state, workers), # reorder states by workers\n             y = workers)) + \n  geom_col() + \n  theme_grattan() + \n  grattan_y_continuous(labels = comma)\nsimple_bar <- data %>% \n  ggplot(aes(x = reorder(state, workers),\n             y = workers)) + \n  geom_col() + \n  theme_grattan() + \n  grattan_y_continuous(labels = comma) + \n  labs(title = \"Most workers are on the east coast\",\n       subtitle = \"Number people in employment, 2016\",\n       x = \"\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\n\nsimple_bar\ngrattan_save(\"atlas/simple_bar.pdf\", simple_bar, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"bar-multi","chapter":"13 Chart cookbook","heading":"13.2.2 Bar plot with multiple series","text":"section create horizontal bar plot showing average income state gender 2016:First create dataset want plot, getting average income state gender year 2016:Looks legit: one observation (row) state \\(\\times\\) gender group want plot, value average income. Put state x-axis, average_income y-axis, split gender fill-colour (fill).Pass data ggplot, give appropriate x y aesthetics, along fill (fill colour31) representing gender. actual values average_income want plot, use geom_col:32The two series – women men – created fill stacked -top geom_col. can tell plot next – ‘dodge’ – instead position argument within geom_col:flip chart – useful move long labels – add coord_flip (ie ‘flip x y coordinates chart’).However, coordinates flipped, underlying data hasn’t. want refer average_income axis, now lies horizontally, still refer y axis (eg grattan_y_continuous still refers y aesthetic, average_income).reorder states average income, state highest (combined) average income top. done reorder(var_to_reorder, var_to_reorder_by) function define state aesthetic:Wonderful – ’s want data look. Now can Grattanise . Note theme_grattan needs know coordinates flipped can apply right settings. Also tell grattan_fill_manual two fill series.can use grattan_label label charts Grattan style. function ‘wrapper’ around geom_label settings tend like: white background thin margin, 18-point font, border. takes standard arguments geom_label.Section 12.6 shows labels treated like data points: need know go (x y) show (label). provide every point labelling geom, plot every label:just label one plots – ie first one, ACT case – need tell grattan_label. easiest way creating label dataset beforehand, like label_gender . just includes observations want label:can pass label_gender dataset grattan_label:Almost ! labels go range little bit, can fix expanding plot:Looks shit hot! Now can add titles caption, save using grattan_save:","code":"\ndata <- sa3_income %>% \n  filter(year == 2016) %>%   \n  group_by(state, gender) %>%   \n  summarise(average_income = sum(total_income) / sum(workers))## `summarise()` has grouped output by 'state'. You can override using the `.groups` argument.\ndata## # A tibble: 16 × 3\n## # Groups:   state [8]\n##    state gender average_income\n##    <chr> <chr>           <dbl>\n##  1 ACT   Men            78141.\n##  2 ACT   Women          65548.\n##  3 NSW   Men            69750.\n##  4 NSW   Women          53191.\n##  5 NT    Men            75246.\n##  6 NT    Women          58527.\n##  7 Qld   Men            65108.\n##  8 Qld   Women          48458.\n##  9 SA    Men            60244.\n## 10 SA    Women          47533.\n## 11 Tas   Men            56345.\n## 12 Tas   Women          45158.\n## 13 Vic   Men            64908.\n## 14 Vic   Women          49264.\n## 15 WA    Men            76677.\n## 16 WA    Women          51578.\ndata %>% \n  ggplot(aes(x = state,\n             y = average_income,\n             fill = gender)) + \n  geom_col()\ndata %>% \n  ggplot(aes(x = state,\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") # 'dodge' the series\ndata %>% \n  ggplot(aes(x = state,\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() # rotate the chart\ndata %>% \n  ggplot(aes(x = reorder(state, average_income), # reorder\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip()\ndata %>% \n  ggplot(aes(x = reorder(state, average_income), \n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + # grattan theme\n  grattan_y_continuous(labels = dollar) + # y axis\n  grattan_fill_manual(2) # grattan fill colours\ndata %>% \n  ggplot(aes(x = reorder(state, average_income), \n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + \n  grattan_y_continuous(labels = dollar) + \n  grattan_fill_manual(2) + \n  grattan_label(aes(colour = gender,  # colour the text according to gender\n                    label = gender),  # label the text according to gender\n            position = position_dodge(width = 1),  # position dodge with width 1\n            hjust = -0.1) +  # horizontally align the label so its outside the bar\n  grattan_colour_manual(2)   # define colour as two grattan colours\nlabel_gender <- data %>% \n  filter(state == \"ACT\")  # just want Tasmania observations\n\nlabel_gender## # A tibble: 2 × 3\n## # Groups:   state [1]\n##   state gender average_income\n##   <chr> <chr>           <dbl>\n## 1 ACT   Men            78141.\n## 2 ACT   Women          65548.\ndata %>% \n  ggplot(aes(x = reorder(state, average_income), \n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + \n  grattan_y_continuous(labels = dollar) + \n  grattan_fill_manual(2) + \n  grattan_label(data = label_gender,  # supply the new dataset\n                aes(colour = gender,\n                    label = gender), \n                position = position_dodge(width = 1), \n                hjust = -0.1) + \n  grattan_colour_manual(2)\ndata %>% \n  ggplot(aes(x = reorder(state, average_income),\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + \n  grattan_y_continuous(labels = dollar, \n                       expand_top = .1) + # expand the plot\n  grattan_fill_manual(2) + \n  grattan_label(data = label_gender,\n                aes(colour = gender,\n                    label = gender), \n                position = position_dodge(width = 1), \n                hjust = -0.1) + \n  grattan_colour_manual(2)\nmultiple_bar <- data %>% \n  ggplot(aes(x = reorder(state, average_income), \n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + \n  grattan_y_continuous(labels = dollar, \n                       expand_top = .1) + \n  grattan_fill_manual(2) + \n  grattan_label(data = label_gender, \n                aes(colour = gender,\n                    label = gender), \n                position = position_dodge(width = 1), \n                hjust = -0.1) + \n  grattan_colour_manual(2) + \n  labs(title = \"Women earn less than men in every state\",\n       subtitle = \"Average income of workers, 2016\",\n       x = \"\",\n       y = \"\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\ngrattan_save(\"atlas/multiple_bar.pdf\", multiple_bar, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"facet-bar","chapter":"13 Chart cookbook","heading":"13.2.3 Facetted bar charts","text":"‘Facetting’ chart means create separate plot group. ’s particularly useful showing differences one group. chart ’ll make section show annual income gender state, professional non-professional workers:Start creating dataset want plot:plot bar chart geom_col theme_grattan elements, using similar chain final plot 13.2.2 (without labelling). ’ll build chart:can ‘facet’ bar charts – chart type – facet_grid facet_wrap commands. latter tends give control label placement, let’s start . fadcet_wrap asks questions: “variables create separete charts ,” “place page?” Tell use prof variable vars() function.33That’s good! . Now just need tidy little bit adding labels avoiding clashes along bottom axis.Create labels way done : want label one ‘women’ ‘men’ series, create dataset contains information:Good – now add plot grattan_label, supplying required aesthetics position. use hjust = 0 tell labels left-aligned.give plot black base axis, can add geom_hline() yintercept = 0.Applaudable! “$0” “$100,000” labels clashing along horizontal axis. tidy , redefine breaks – points labelled – 25,000, 50,000 75,000 inside grattan_y_continuous. Putting everything together saving plot fullslide chart grattan_save:","code":"\ndata <- sa3_income %>% \n  group_by(state, gender, prof) %>% \n  summarise(average_income = sum(total_income) / sum(workers))## `summarise()` has grouped output by 'state', 'gender'. You can override using the `.groups` argument.\ndata## # A tibble: 32 × 4\n## # Groups:   state, gender [16]\n##    state gender prof             average_income\n##    <chr> <chr>  <chr>                     <dbl>\n##  1 ACT   Men    Non-professional         52545.\n##  2 ACT   Men    Professional             96488.\n##  3 ACT   Women  Non-professional         46151.\n##  4 ACT   Women  Professional             79828.\n##  5 NSW   Men    Non-professional         49182.\n##  6 NSW   Men    Professional             91624.\n##  7 NSW   Women  Non-professional         36772.\n##  8 NSW   Women  Professional             68445.\n##  9 NT    Men    Non-professional         58844.\n## 10 NT    Men    Professional             87666.\n## # … with 22 more rows\nfacet_bar <- data %>% \n  ggplot(aes(x = reorder(state, average_income),\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE) + \n  grattan_y_continuous(labels = dollar, \n                       expand_top = .1) + \n  grattan_fill_manual(2) + \n  grattan_colour_manual(2) + \n  labs(title = \"Professional workers earn more in every state\",\n       subtitle = \"Average income of workers, 2016\",\n       x = \"\",\n       y = \"\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\nfacet_bar +\n  facet_wrap(vars(prof))\nlabel_data <- data %>% \n  filter(state == \"ACT\",\n         prof == \"Non-professional\")\n\nlabel_data## # A tibble: 2 × 4\n## # Groups:   state, gender [2]\n##   state gender prof             average_income\n##   <chr> <chr>  <chr>                     <dbl>\n## 1 ACT   Men    Non-professional         52545.\n## 2 ACT   Women  Non-professional         46151.\nfacet_bar +\n  facet_wrap(vars(prof)) + \n  geom_hline(yintercept = 0) +  # add black line\n  grattan_label(data = label_data, # supply label data\n                aes(label = gender,\n                    colour = gender),\n                position = position_dodge(width = 1), \n                hjust = 0)\n# Create label data\nlabel_data <- data %>% \n  filter(state == \"ACT\",\n         prof == \"Non-professional\")\n\n# Create plot\nfacet_bar <- data %>% \n  ggplot(aes(x = reorder(state, average_income),\n             y = average_income,\n             fill = gender)) + \n  geom_col(position = \"dodge\") + \n  coord_flip() + \n  theme_grattan(flipped = TRUE, base_size = 16) + \n  grattan_y_continuous(labels = dollar,\n                       breaks = c(0, 25e3, 50e3, 75e3)) +  # change breaks\n  grattan_fill_manual(2) + \n  grattan_colour_manual(2) + \n  labs(title = \"Professional workers earn more in every state\",\n       subtitle = \"Average income of workers, 2016\",\n       x = \"\",\n       y = \"\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\") + \n  facet_wrap(vars(prof)) + \n  grattan_label(data = label_data,\n                aes(label = gender,\n                    colour = gender),\n                position = position_dodge(width = 1), \n                hjust = 0)\ngrattan_save(\"atlas/facet_bar.pdf\", facet_bar, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"line-charts","chapter":"13 Chart cookbook","heading":"13.3 Line charts","text":"line chart one key aesthetic: group. tells ggplot connect individual lines.","code":""},{"path":"chart-cookbook.html","id":"simple-line-chart","chapter":"13 Chart cookbook","heading":"13.3.1 Simple line chart","text":"first line chart shows number workers Australia 2011 2016:","code":""},{"path":"chart-cookbook.html","id":"line-chart-with-multiple-series","chapter":"13 Chart cookbook","heading":"13.3.2 Line chart with multiple series","text":"line chart show real average income changed state past five years:First, take sa3_income dataset create summary table average income year state. Ignore territories chart.income data presented nominal, ’ll need inflate ‘real’ dollars using `cpi_inflatePlot line chart taking data, passing ggplot aesthetics, using geom_line:Now can represent state colour:Cooler! Adding Grattan formatting define ‘base chart’:can add ‘dots’ year layering geom_point top geom_line:add labels end line, expand x-axis make room labels add reasonable breaks:add labels, usingIf wanted show state individually, facet chart separate plot produced state:","code":"\ndata <- sa3_income %>% \n  filter(!state %in% c(\"ACT\", \"NT\")) %>% \n  group_by(year, state) %>% \n  summarise(average_income = sum(total_income) / sum(workers))\n\nhead(data)## # A tibble: 6 × 3\n## # Groups:   year [1]\n##    year state average_income\n##   <dbl> <chr>          <dbl>\n## 1  2011 NSW           55483.\n## 2  2011 Qld           51408.\n## 3  2011 SA            48443.\n## 4  2011 Tas           45439.\n## 5  2011 Vic           52053.\n## 6  2011 WA            58795.\ndata %>% \n  ggplot(aes(x = year,\n             y = average_income,\n             group = state)) + \n  geom_line()\ndata %>% \n  ggplot(aes(x = year,\n             y = average_income,\n             group = state,\n             colour = state)) + \n  geom_line()\nbase_chart <-data %>% \n  ggplot(aes(x = year,\n             y = average_income,\n             group = state,\n             colour = state)) + \n  geom_line() +\n  theme_grattan() + \n  grattan_y_continuous(labels = comma) + \n  grattan_colour_manual(6) +\n  labs(x = \"\",\n       y = \"\")\n\nbase_chart\nbase_chart +\n  geom_point()\nbase_chart +\n  grattan_x_continuous(expand_right = .3,\n                       breaks = seq(2010, 2016, 2),\n                       labels = c(\"2010\", \"12\", \"14\", \"16\")) \nlabel_line <- data %>% \n  filter(year == 2010)\n\nbase_chart +\n  geom_point() +\n  grattan_x_continuous(expand_left = .1,\n                       breaks = seq(2010, 2016, 2),\n                       labels = c(\"2010\", \"12\", \"14\", \"16\")) \n  grattan_label(data = label_line,\n                aes(label = state),\n                nudge_x = -Inf,\n                segment.colour = NA)## Warning: Ignoring unknown parameters: segment.colour## mapping: label = ~state \n## geom_label: parse = FALSE, label.padding = 0.1, label.r = 0.15, label.size = 0, na.rm = FALSE\n## stat_identity: na.rm = FALSE\n## position_nudge\nbase_chart +\n  geom_point() +\n    grattan_x_continuous(expand_left = .1, \n                         expand_right = .1,\n                         breaks = seq(2010, 2016, 2),\n                         labels = c(\"2010\", \"12\", \"14\", \"16\")) + \n  theme(panel.spacing.x = unit(10, \"mm\")) + \n  facet_wrap(state ~ .)"},{"path":"chart-cookbook.html","id":"scatter-plots","chapter":"13 Chart cookbook","heading":"13.4 Scatter plots","text":"Scatter plots require x y aesthetics. can coloured faceted.","code":""},{"path":"chart-cookbook.html","id":"simple-scatter-plot","chapter":"13 Chart cookbook","heading":"13.4.1 Simple scatter plot","text":"first simple scatter plot show relationship average incomes professionals number professional workers area 2016:Create dataset want plot:dataset one observation per SA3, two variables want plot: workers average income. Pass data ggplot, set aesthetics plot geom_point:add Grattan theme elements:theme_grattan(), telling chart_type scatter plot.grattan_y_continuous(), setting label style dollar.grattan_x_continuous(), setting label style comma.Looks highest quality. last label x-axis goes page bit can expand plot right grattan_x_continuous element:Finally, add titles save plot:","code":"\ninclude_graphics(\"atlas/simple_scatter.png\")\ndata <- sa3_income %>% \n  filter(year == 2016,\n         prof == \"Professional\") %>% \n  group_by(sa3_name) %>% \n  summarise(workers = sum(workers),\n            average_income = sum(total_income) / workers)\n\nhead(data)## # A tibble: 6 × 3\n##   sa3_name       workers average_income\n##   <chr>            <dbl>          <dbl>\n## 1 Adelaide City    10005         90115.\n## 2 Adelaide Hills   24715         84921.\n## 3 Albany           12390         70581.\n## 4 Albury           16465         72305.\n## 5 Alice Springs     9640         84340.\n## 6 Armadale         19771         85407.\ndata %>% \n  ggplot(aes(x = workers,\n             y = average_income)) + \n  geom_point()\ndata %>% \n  ggplot(aes(x = workers,\n             y = average_income)) + \n  geom_point()  +\n  theme_grattan(chart_type = \"scatter\") + \n  grattan_y_continuous(labels = dollar) + \n  grattan_x_continuous(labels = comma)\ndata %>% \n  ggplot(aes(x = workers,\n             y = average_income)) + \n  geom_point()  +\n  theme_grattan(chart_type = \"scatter\") + \n  grattan_y_continuous(labels = dollar) + \n  grattan_x_continuous(labels = comma,\n                       expand_right = .05) # expand the right by 5%\nsimple_scatter <- data %>% \n  ggplot(aes(x = workers,\n             y = average_income)) + \n  geom_point()  +\n  theme_grattan(chart_type = \"scatter\") + \n  grattan_y_continuous(labels = dollar) + \n  grattan_x_continuous(labels = comma,\n                       expand_right = .05) + \n  labs(title = \"More workers, more income\",\n       subtitle = \"Average income and number of workers by SA3, 2016\",\n       y = \"Average income\",\n       x = \"Workers\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\ngrattan_save(\"atlas/simple_scatter.pdf\", simple_scatter, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"scatter-plot-with-reshaped-data","chapter":"13 Chart cookbook","heading":"13.4.2 Scatter plot with reshaped data","text":"next scatter plot involves basic plotting principles chart , requires bit data manipulation plotting.chart show wages professional workers non-professional workers 2016:First prepare data. want find average incomes professional non-professional workers 2016:’s good – numbers need. think ’re going plot using x y aesthetics. ’ll need one variable x = professional_income one variable y = non_professional_income. moment, represented different rows.can fix reshaping data pivot_wider function. three arguments provide :id_cols = sa3_name: variable sa3_name uniquely identifies row data.names_from = prof: variable prof contains variables names new variables creating.values_from = average_income: variable average_income contains values fill new variables.pivot_wider step complete, use janitor::clean_names() convert new Professional Non-Professional names snake_case make easier use track:Getting data right format plot – rather ‘hacking’ plot fit data – save time effort line.Now dataset format want plot, can pass ggplot add aesthetics like normally ., like ’ve done , add Grattan theme elements titles, save grattan_save:","code":"\ninclude_graphics(\"atlas/scatter_reshape.png\")\ndata_prep <- sa3_income %>% \n  filter(year == 2016) %>% \n  group_by(sa3_name, prof) %>% \n  summarise(average_income = sum(total_income) / sum(workers))## `summarise()` has grouped output by 'sa3_name'. You can override using the `.groups` argument.\nhead(data_prep)## # A tibble: 6 × 3\n## # Groups:   sa3_name [3]\n##   sa3_name       prof             average_income\n##   <chr>          <chr>                     <dbl>\n## 1 Adelaide City  Non-professional         40843.\n## 2 Adelaide City  Professional             90115.\n## 3 Adelaide Hills Non-professional         47208.\n## 4 Adelaide Hills Professional             84921.\n## 5 Albany         Non-professional         46609.\n## 6 Albany         Professional             70581.\ndata <- data_prep %>% \n  pivot_wider(id_cols = sa3_name,  # variables that will stay the same\n              names_from = prof,   # variables that will dictate the new names\n              values_from = average_income) %>%  # these will be the values\n  janitor::clean_names() # tidy up the new variable names\n\nhead(data)## # A tibble: 6 × 3\n## # Groups:   sa3_name [6]\n##   sa3_name       non_professional professional\n##   <chr>                     <dbl>        <dbl>\n## 1 Adelaide City            40843.       90115.\n## 2 Adelaide Hills           47208.       84921.\n## 3 Albany                   46609.       70581.\n## 4 Albury                   44718.       72305.\n## 5 Alice Springs            54647.       84340.\n## 6 Armadale                 57599.       85407.\ndata %>% \n  ggplot(aes(x = non_professional,\n             y = professional)) + \n  geom_point(alpha = 0.8) # make the points a little transparent## Warning: Removed 1 rows containing missing values (geom_point).\nscatter_reshape <- data %>% \n  ggplot(aes(x = non_professional,\n             y = professional)) + \n  geom_point(alpha = 0.8) + \n  theme_grattan(chart_type = \"scatter\") + \n  grattan_y_continuous(labels = dollar) + \n  grattan_x_continuous(labels = dollar) +\n  labs(title = \"Non-professionals tend to earn more when professionals do\",\n       subtitle = \"Average income for workers by SA3, 2016\",\n       y = \"Professional incomes\",\n       x = \"Non-professional incomes\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\ngrattan_save(\"atlas/scatter_reshape.pdf\", scatter_reshape, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"layered-scatter-plot","chapter":"13 Chart cookbook","heading":"13.4.3 Layered scatter plot","text":"third plot, look incomes non-professional workers area’s total income percentile:Get data want plot:make scatter plot average_income sa3_income_percentile, pass income dataset ggplot, add x = sa3_income_percentile, y = average_income colour = gender aesthetics, plot geom_point. Tell geom_point reduce opacity alpha = 0.2, individual points ‘background’ plot:Now add Grattan theme elements:theme_grattan(), telling chart_type scatter plot.grattan_colour_manual() 2 colours.grattan_y_continuous(), setting label style dollar. Also tell plot start zero setting limits = c(0, NA) (lower, upper limits, NA representing ‘choose automatically’). Note starting zero isn’t requirement scatter plots, give breathing space labels.grattan_x_continuous().Looks great! make point little clearer, can overlay point average income percentile. Create dataset average income area professional work category:layer plot adding another geom_point providing perc_average data. Add fill aesthetic change shape 21: circle border (controlled colour) fill colour (controlled fill).34\nMake outline circle black colour make size little bigger:add labels, first decide go. Try positioning “Professional” averages, “Non-professional” bottom.Like labelling , create new dataset label information, pass label dataset grattan_label function:Finally, add labels plot give titles:Putting together, code look something like :","code":"\ninclude_graphics(\"atlas/scatter_layer.png\")\ndata <- sa3_income %>% \n  filter(year == 2016) %>%\n  mutate(total_income = average_income * workers) %>% \n  group_by(sa3_name, sa3_income_percentile, prof, occ_short) %>% \n  summarise(income = sum(total_income),\n            workers = sum(workers),\n            average_income = income / workers)\n\nhead(data)## # A tibble: 6 × 7\n## # Groups:   sa3_name, sa3_income_percentile, prof [1]\n##   sa3_name      sa3_income_perce… prof   occ_short income workers average_income\n##   <chr>                     <dbl> <chr>  <chr>      <dbl>   <dbl>          <dbl>\n## 1 Adelaide City                66 Non-p… Admin     1.44e8    2674         53979.\n## 2 Adelaide City                66 Non-p… Driver    1.85e7     396         46762.\n## 3 Adelaide City                66 Non-p… Labourer  3.92e7    1516         25868.\n## 4 Adelaide City                66 Non-p… Sales     5.05e7    1546         32680.\n## 5 Adelaide City                66 Non-p… Service   7.75e7    2346         33034.\n## 6 Adelaide City                66 Non-p… Trades    7.85e7    1525         51448.\ndata %>% \n  ggplot(aes(x = sa3_income_percentile,\n             y = average_income,\n             colour = prof)) +\n  geom_point(alpha = 0.2)\nbase_chart <- data %>% \n  ggplot(aes(x = sa3_income_percentile,\n             y = average_income,\n             colour = prof)) +\n  geom_point(alpha = 0.2) + \n  theme_grattan(chart_type = \"scatter\") + \n  grattan_colour_manual(2) + \n  grattan_y_continuous(labels = dollar, \n                       limits = c(0, NA)) + \n  grattan_x_continuous()\n\nbase_chart\nperc_average <- data %>% \n  group_by(prof, sa3_income_percentile) %>% \n  summarise(average_income = sum(income) / sum(workers))## `summarise()` has grouped output by 'prof'. You can override using the `.groups` argument.\nhead(perc_average)## # A tibble: 6 × 3\n## # Groups:   prof [1]\n##   prof             sa3_income_percentile average_income\n##   <chr>                            <dbl>          <dbl>\n## 1 Non-professional                     1         40515.\n## 2 Non-professional                     2         42689.\n## 3 Non-professional                     3         42280.\n## 4 Non-professional                     4         42600.\n## 5 Non-professional                     5         43868.\n## 6 Non-professional                     6         42615.\nbase_chart +\n  geom_point(data = perc_average,\n             aes(fill = prof),\n             shape = 21,\n             size = 3, \n             colour = \"black\") + \n  grattan_fill_manual(2)\nlabel_data <- tibble(\n  sa3_income_percentile = c(50, 50),\n  average_income = c(15e3, 120e3),\n  prof =  c(\"Non-professional\", \"Professional\"))\nbase_chart +\n  geom_point(data = perc_average,\n             aes(fill = prof),\n             shape = 21,\n             size = 3, \n             colour = \"black\") + \n  grattan_fill_manual(2) + \n  grattan_label(data = label_data,\n                aes(label = prof)) + \n  labs(title = \"Non-professional workers earn about the same, regardless of area income\",\n       subtitle = \"Average income of workers by area income percentile, 2016\",\n       x = \"Area total income percentile\",\n       y = \"Average income\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\n# Create percentage data\nperc_average <- data %>% \n  group_by(prof, sa3_income_percentile) %>% \n  summarise(average_income = sum(income) / sum(workers))## `summarise()` has grouped output by 'prof'. You can override using the `.groups` argument.\n# Create label data\nlabel_data <- tibble(\n  sa3_income_percentile = c(50, 50),\n  average_income = c(15e3, 120e3),\n  prof =  c(\"Non-professional\", \"Professional\"))\n\n\n# Plot \nscatter_layer <- data %>% \n  ggplot(aes(x = sa3_income_percentile,\n             y = average_income,\n             colour = prof)) +\n  geom_point(alpha = 0.2) + \n  theme_grattan(chart_type = \"scatter\") + \n  grattan_colour_manual(2) + \n  grattan_y_continuous(labels = dollar, \n                       limits = c(0, NA)) + \n  grattan_x_continuous() + \n  geom_point(data = perc_average,\n             aes(fill = prof),\n             shape = 21,\n             size = 3, \n             colour = \"black\") + \n  grattan_fill_manual(2) + \n  grattan_label(data = label_data,\n                aes(label = prof)) + \n  labs(title = \"Non-professional workers earn about the same, regardless of area income\",\n       subtitle = \"Average income of workers by area income percentile, 2016\",\n       x = \"Area total income percentile\",\n       y = \"Average income\",\n       caption = \"Notes: Only includes people who submitted a tax return in 2016-16. Source: ABS (2018)\")\ngrattan_save(\"atlas/scatter_layer.pdf\", scatter_layer, type = \"fullslide\")"},{"path":"chart-cookbook.html","id":"scatter-plots-with-trendlines","chapter":"13 Chart cookbook","heading":"13.4.4 Scatter plots with trendlines","text":"","code":""},{"path":"chart-cookbook.html","id":"facetted-scatter-plots","chapter":"13 Chart cookbook","heading":"13.4.5 Facetted scatter plots","text":"","code":""},{"path":"chart-cookbook.html","id":"distributions","chapter":"13 Chart cookbook","heading":"13.5 Distributions","text":"geom_histogram\ngeom_densityggridges::","code":""},{"path":"chart-cookbook.html","id":"maps","chapter":"13 Chart cookbook","heading":"13.6 Maps","text":"","code":""},{"path":"chart-cookbook.html","id":"sf-objects","chapter":"13 Chart cookbook","heading":"13.6.1 sf objects","text":"[]","code":""},{"path":"chart-cookbook.html","id":"using-absmapsdata-and-strayr","chapter":"13 Chart cookbook","heading":"13.6.2 Using absmapsdata and strayr","text":"absmapsdata package contains compressed, tidied sf objects containing geometric information ABS data structures. included objects :Statistical Area 1 2011: sa12011; 2016: sa12016; 2021: sa12021.Statistical Area 2 2011: sa22011; 2016: sa22016; 2021: sa22021.Statistical Area 3 2011: sa32011; 2016: sa32016; 2021: sa32021.Statistical Area 4 2011: sa42011; 2016: sa42016; 2021: sa42021.Greater Capital Cities 2011: gcc2011; 2016: gcc2016; 2021: gcc2021.Remoteness Areas 2011: ra2011; 2016: ra2016State 2011: state2011; 2016: state2016; state2021.Commonwealth Electoral Divisions 2018: ced2018; 2021: ced2021State Electoral Divisions 2018:sed2018; 2021: sed2021Local Government Areas 2016: lga2016; 2018: lga2018; 2021: lga2021Regions Internet Vacancy Index 2008: regional_ivi2008Postcodes 2016: postcodes2016; 2021: postcodes2021Census Population Housing Destination Zones 2011: dz2011; 2016: dz2016; 2021: dz2021.package hosted Github installed remotes::install_github(\"wfmackey/absmapsdata\").\nHowever, package contains lot data, quite large can pain install. alternative, can use strayr package download sf objects demand rather installing whole absmapsdata package:also need sf package installed handle sf objects:Now can view sf objects stored absmapsdata:","code":"\nremotes::install_github(\"runapp-aus/strayr\")\nlibrary(strayr)\ninstall.packages(\"sf\")\nlibrary(sf)\nsa32016 <- strayr::read_absmap(\"sa32016\")\nglimpse(sa32016)## Rows: 358\n## Columns: 12\n## $ sa3_code_2016   <chr> \"10102\", \"10103\", \"10104\", \"10105\", \"10106\", \"10201\", …\n## $ sa3_name_2016   <chr> \"Queanbeyan\", \"Snowy Mountains\", \"South Coast\", \"Goulb…\n## $ sa4_code_2016   <chr> \"101\", \"101\", \"101\", \"101\", \"101\", \"102\", \"102\", \"103\"…\n## $ sa4_name_2016   <chr> \"Capital Region\", \"Capital Region\", \"Capital Region\", …\n## $ gcc_code_2016   <chr> \"1RNSW\", \"1RNSW\", \"1RNSW\", \"1RNSW\", \"1RNSW\", \"1GSYD\", …\n## $ gcc_name_2016   <chr> \"Rest of NSW\", \"Rest of NSW\", \"Rest of NSW\", \"Rest of …\n## $ state_code_2016 <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\",…\n## $ state_name_2016 <chr> \"New South Wales\", \"New South Wales\", \"New South Wales…\n## $ areasqkm_2016   <dbl> 6511.1906, 14283.4221, 9864.8680, 9099.9086, 12136.173…\n## $ cent_long       <dbl> 149.6013, 148.9415, 149.8063, 149.6054, 148.6799, 151.…\n## $ cent_lat        <dbl> -35.44939, -36.43952, -36.49933, -34.51814, -34.58077,…\n## $ geometry        <MULTIPOLYGON [°]> MULTIPOLYGON (((149.979 -35..., MULTIPOLY…"},{"path":"chart-cookbook.html","id":"making-choropleth-maps","chapter":"13 Chart cookbook","heading":"13.6.3 Making choropleth maps","text":"Choropleth maps break area ‘bits,’ colours ‘bit’ according variable.can join sf objects absmapsdata dataset using left_join. variable names might different – eg sa3_name compared sa3_name_2016 – use argument match .First, take sa3_income dataset join sf object sa32016 absmapsdata:plot map like ggplot: provide data, choose aes geom. maps sf objects, key aesthetic geometry = geometry, key geom geom_sf.argument lwd controls line width area borders.Note RStudio takes long time render map theShowing Australia single map difficult: enormous areas home people dominate space. Showing individual states capital city areas can sometimes useful., filter map_data object:","code":"\nmap_data <- sa3_income %>% \n  left_join(sa32016, by = c(\"sa3_name\" = \"sa3_name_2016\"))"},{"path":"chart-cookbook.html","id":"adding-labels-to-maps","chapter":"13 Chart cookbook","heading":"13.6.3.1 Adding labels to maps","text":"can add labels choropleth maps standard geom_text geom_label. likely labels overlap, ggrepel::geom_text_repel ggrepel::geom_label_repel usually better option.use geom_(text|label)_repel, need tell ggrepel ","code":"\nmap <- map_data %>% \n        filter(state == \"Vic\") %>% \n        ggplot(aes(geometry = geometry)) +\n        geom_sf(aes(fill = pop_change),\n                lwd = .1,\n                colour = \"black\") +\n        theme_void() +\n        grattan_fill_manual(discrete = FALSE, \n                            palette = \"diverging\",\n                            limits = c(-20, 20),\n                            breaks = seq(-20, 20, 10)) +\n  geom_label_repel(aes(label = sa3_name),\n                  stat = \"sf_coordinates\", nudge_x = 1000, segment.alpha = .5,\n                  size = 4, \n                  direction = \"y\",\n                  label.size = 0, \n                  label.padding = unit(0.1, \"lines\"),\n                  colour = \"grey50\",\n                  segment.color = \"grey50\") + \n  scale_y_continuous(expand = expand_scale(mult = c(0, .2))) + \n  theme(legend.position = \"top\") + \n  labs(fill = \"Population \\nchange\")\n\nmap"},{"path":"chart-cookbook.html","id":"creating-simple-interactive-graphs-with-plotly","chapter":"13 Chart cookbook","heading":"13.7 Creating simple interactive graphs with plotly","text":"plotly::ggplotly()","code":""},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"functional-programming-making-and-using-your-own-functions","chapter":"14 Functional programming: making and using your own functions","heading":"14 Functional programming: making and using your own functions","text":"earth create function?can useful make function","code":""},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"set-up-2","chapter":"14 Functional programming: making and using your own functions","heading":"14.1 Set up","text":"use tidyverse purrr chapter.","code":"\nlibrary(tidyverse)## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──## ✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n## ✓ tibble  3.1.3     ✓ dplyr   1.0.7\n## ✓ tidyr   1.1.3     ✓ stringr 1.4.0\n## ✓ readr   2.0.0     ✓ forcats 0.5.1## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## x dplyr::filter() masks stats::filter()\n## x dplyr::lag()    masks stats::lag()\nlibrary(purrr)"},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"defining-simple-functions","chapter":"14 Functional programming: making and using your own functions","heading":"14.2 Defining simple functions","text":"Like data, function object defined.Let’s say wanted take whatever value add one .\ndefine function called add_one :four elements just :Created new function using function() function.Defined one argument (input) new function: xGave function instructions ‘take x add one’: x + 1.Assigned function object add_one.Now ’ve done , can call function like :can define functions can take one argument:takes three arguments, defaults provided,\n’ll get error fotget one:can also provide default values function define :don’t provide value n call make_power function,\ndefault 2:can override providing value:can also assign result function (10000 ) \nobject :reason, others described section follow, function\ncan return one thing (number, vector, dataset, list, ).","code":"\nadd_one <- function(x) {\n  x + 1\n}\nadd_one(1)## [1] 2\nadd_one(2)## [1] 3\nadd_one(100)## [1] 101\nadd_together_plus_one <- function(x, y, z) {\n  x + y + z + 1\n}\n\nadd_together_plus_one(1, 2, 3)## [1] 7\nadd_together_plus_one(1, 2)## Error in add_together_plus_one(1, 2): argument \"z\" is missing, with no default\nmake_power <- function(x, n = 2) {\n x^n \n}\nmake_power(10)## [1] 100\nmake_power(10, 4)## [1] 10000\nmy_power_number <- make_power(10, 4)"},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"functions-conditionals","chapter":"14 Functional programming: making and using your own functions","heading":"14.3 Using conditional statements and categorical arguments","text":"Sometimes want function behave differently different\ncircumstances. example, might want one thing input \nREALLY BIG number, another ’s small.Conditional statements – evaluate expression proceed TRUE – can useful occasions.\nfunction takes one argument – x – transforms depending large :input number greater 10, make_smaller function take\n10 ; ’s 10 less, just take 5 :Making use return() function make clearer.\nx greater 10, make_smaller function now subtract 10\nimmediately return value, ignoring everything else :conditional statements can used input options functions.\nLet’s say vector ages people office, office_ages:summarise office age, might want function round age nearest 10. make function rounds number nearest 10,\nusing round() function digits set -1 (.e. round nearest 10):Perfect. ages look implausible, might also want function validate , , say, capping ages zero 100. let validate_ages argument, defaulting TRUE, TRUE, perform validation:Now, validate_ages == TRUE (default), numbers 100 replaced 100, less 0 0:can turn behaviour setting validate_ages FALSE:However, might trust age entry -6 200 , might want give user option remove rather assume 0 100. provide option one two ways.first add another argument, shown .fine! default, function still works like previously:user wants validate ages want remove \nimplausible ages, replaced NA:35But nested conditional statements – often\nneeded! – can bit headache.\nanother way can , might neater instance.\nvalidate_ages argument take character string tells \nvalidation method use. use \"remove\" \"adjust\" indicate \nvalidation methods:Now can use validate_ages argument get results want:","code":"\nmake_smaller <- function(x) {\n  if (x > 10) {\n    return_number <- x - 10\n  }\n  if (x <= 10) {\n    return_number <- x - 5\n  }\n  return_number\n}\nmake_smaller(7)## [1] 2\nmake_smaller(13)## [1] 3\nmake_smaller <- function(x) {\n  if (x > 10) {\n    return(x - 10)\n  }\n  if (x <= 10) {\n    return(x - 5)\n  }\n}\n\nmake_smaller(7)## [1] 2\nmake_smaller(13)## [1] 3\noffice_ages <- c(-6, 12, 21, 36, 56, 67, 200)\noffice_ages## [1]  -6  12  21  36  56  67 200\nmake_age10 <- function(age) {\n  round(age, digits = -1)\n}\n\nmake_age10(office_ages)## [1] -10  10  20  40  60  70 200\nmake_age10 <- function(age,\n                       validate_ages = TRUE) {\n  \n  # First, validate ages IF ASKED FOR\n  if (validate_ages) {\n    age <- if_else(age > 100, 100, age)\n    age <- if_else(age < 0, 0, age)\n  }\n  \n  # Then round ages to the nearest 10:\n  round(age, digits = -1)\n}\nmake_age10(office_ages)## [1]   0  10  20  40  60  70 100\nmake_age10(office_ages, validate_ages = FALSE)## [1] -10  10  20  40  60  70 200\nmake_age10 <- function(age,\n                       validate_ages = TRUE,\n                       remove_implausible = FALSE) {\n  \n  # First, validate ages\n  if (validate_ages) {\n    if (remove_implausible) {\n      # Replace implausible ages with NAs\n      age <- if_else(age > 100 | age < 0, NA_real_, age)\n    }\n    if (!remove_implausible) {\n      # Replace implausible ages with their nearest plausible age\n      age <- if_else(age > 100, 100, age)\n      age <- if_else(age < 0, 0, age)\n    }\n  }\n  \n  # Then round ages to the nearest 10:\n  round(age, digits = -1)\n}\nmake_age10(office_ages, validate_ages = TRUE)## [1]   0  10  20  40  60  70 100\nmake_age10(office_ages, validate_ages = TRUE, remove_implausible = TRUE)## [1] NA 10 20 40 60 70 NA\nmake_age10 <- function(age,\n                       validate_ages = \"remove\") {\n  \n  # First, validate ages\n  if (validate_ages == \"remove\") {\n    age <- if_else(age > 100 | age < 0, NA_real_, age)\n  }\n  \n  if (validate_ages == \"adjust\") {\n    # Replace implausible ages with their nearest plausible age\n    age <- if_else(age > 100, 100, age)\n    age <- if_else(age < 0, 0, age)\n  }\n  \n  # Then round ages to the nearest 10:\n  round(age, digits = -1)\n}\nmake_age10(office_ages, validate_ages = \"adjust\")## [1]   0  10  20  40  60  70 100\nmake_age10(office_ages, validate_ages = \"remove\")## [1] NA 10 20 40 60 70 NA"},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"functions-returned","chapter":"14 Functional programming: making and using your own functions","heading":"14.4 What is ‘returned’ from a function?","text":"function can lots things background.\nexample, might want take vector, square every number,\nadd numbers :Running function vector numbers \\(1, 2, 3, ..., 10\\) (created 1:10) want:look Environment window. two objects created \nfunction – added summed – aren’t ! instead calculated,\nstored background, removed function finished.function returns one thing; everything else created \ndiscarded.36\nbehaviour keeps environment clean tidy, can cause frustration ’re getting started.one thing returned – default – last thing printed \nfunction. bad explanation need make better\nsum_squares , defined two objects passed summed \nend function. omitted last step, function wouldn’t return anything:empty_sum_squares function took 1:10 vector, added one, \nsummed resulting numbers. didn’t return anything.\njust assigned values added summed objects, function\nfinished objects vanished.return() function can help make behaviour clear. Using return()\nstop function tracks pass object function.\ncan use sum_squares function:Ensuring function returns object want form want second step writing functions.","code":"\nsum_squares <- function(x) {\n  # first, add one to each using the function we defined above\n  added <- add_one(x)\n  # then sum all the numbers in the vector\n  summed <- sum(added)\n  # then return the summed object\n  summed\n}\nsum_squares(1:10)## [1] 65\nempty_sum_squares <- function(x) {\n  # first, add one to each using the function we defined above\n  added <- add_one(x)\n  # then sum all the numbers in the vector\n  summed <- sum(added)\n}\n\nempty_sum_squares(1:10)\nsum_squares <- function(x) {\n  # first, add one to each using the function we defined above\n  added <- add_one(x)\n  # then sum all the numbers in the vector\n  summed <- sum(added)\n  # then return the summed object\n  return(summed) # function stops here!\n}"},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"using-functions-on-datasets-within-mutate","chapter":"14 Functional programming: making and using your own functions","heading":"14.5 Using functions on datasets within mutate()","text":"Recall adding (changing) variable dataset mutate, length output must either length dataset one (repeated). Anything else throw error:section , created make_age10 function applied little vector ages. function took vector returned vector length:","code":"\noffice_df <- tibble(office_ages)\noffice_df## # A tibble: 7 × 1\n##   office_ages\n##         <dbl>\n## 1          -6\n## 2          12\n## 3          21\n## 4          36\n## 5          56\n## 6          67\n## 7         200\n# A single element will be repeated:\noffice_df %>% \n  mutate(fave_colour = \"#F68B33\")## # A tibble: 7 × 2\n##   office_ages fave_colour\n##         <dbl> <chr>      \n## 1          -6 #F68B33    \n## 2          12 #F68B33    \n## 3          21 #F68B33    \n## 4          36 #F68B33    \n## 5          56 #F68B33    \n## 6          67 #F68B33    \n## 7         200 #F68B33\n# A vector of length of the dataset is fine:\noffice_df %>% \n  mutate(fave_number = c(10, 4, 1, 4, 0, 99, 100))## # A tibble: 7 × 2\n##   office_ages fave_number\n##         <dbl>       <dbl>\n## 1          -6          10\n## 2          12           4\n## 3          21           1\n## 4          36           4\n## 5          56           0\n## 6          67          99\n## 7         200         100\n# BUT a vector of a different length will cause an error:\noffice_df %>% \n  mutate(fave_lunch = c(\"pasta salad\", \"a variety\"))## Error: Problem with `mutate()` column `fave_lunch`.\n## ℹ `fave_lunch = c(\"pasta salad\", \"a variety\")`.\n## ℹ `fave_lunch` must be size 7 or 1, not 2.\noffice_ages %>% length()## [1] 7\nmake_age10(office_ages) %>% length()## [1] 7"},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"using-the-purrr-family-of-functions","chapter":"14 Functional programming: making and using your own functions","heading":"14.6 Using the purrr family of functions","text":"Section finished; see https://github.com/grattan/R_at_Grattan/issues/59","code":""},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"using-functions-for-visualisations","chapter":"14 Functional programming: making and using your own functions","heading":"14.7 Using functions for visualisations","text":"","code":""},{"path":"functional-programming-making-and-using-your-own-functions.html","id":"sharing-your-useful-functions-with-grattan-and-the-world","chapter":"14 Functional programming: making and using your own functions","heading":"14.8 Sharing your useful functions with Grattan and the world","text":"","code":""},{"path":"version-control.html","id":"version-control","chapter":"15 Version control","heading":"15 Version control","text":"chapter explores version control lays tools use version control.","code":""},{"path":"version-control.html","id":"version-control-is-important-and-intimidating","chapter":"15 Version control","heading":"15.1 Version control is important and intimidating","text":"Version control great! although ’s initially quite complicated stress-inducing, long run ’ll find actually makes much sense, wish ’d known writing university essays!? Two reasons.Version control allows us go back time.Version control allows us go back time.Version control allows multiple analysts work project simultaneously, way Excel just doesn’t.Version control allows multiple analysts work project simultaneously, way Excel just doesn’t.","code":""},{"path":"version-control.html","id":"step-back-in-time","chapter":"15 Version control","heading":"15.1.1 Step back in time","text":"Let’s talk first going back time. Version control means multiple snapshots project different stages development. means get big mess code one day, can easily jump back earlier point start .used properly, version control also stores project’s journey, allowing record made decisions . can really useful – need edit multiple files make big change, ’s useful record made changes. diminish need lots comments code, however; remain vitally important explaining code .","code":""},{"path":"version-control.html","id":"get-outta-my-way","chapter":"15 Version control","heading":"15.1.2 Get outta my way","text":"working together simultaneously, two extreme situations often encounter (version control bridges gap).Situation 1: ’re working Excel model, teammate needs make change. jump , make change, save file (despite Dropbox’s warning someone else editing document). Soon , save changes. Boom! Now conflicted copy Dropbox.Situation 2: two working Google Sheet. much collaborative – can see document, see cell ’re working . teammate changes formula cell B45, happens affect analysis ’re cell A3 next sheet. Now ’re sure formula right , value expecting see appearing. annoying!Version control allows work document time, implement person’s changes want . edits conflict , instead getting new conflicted copy document Dropbox, version control software can tell exactly conflict arose can quickly decide fix .Need convincing? Jenny Bryan RStudio eloquently explains need version control life. Seriously. ’s great article. convinced us.","code":""},{"path":"version-control.html","id":"using-github","chapter":"15 Version control","heading":"15.2 Using Github","text":"use Github version-control share reports LaTeX, ’re already bit set-.version control akin writing history, Github library information archived can go easily retrieve information.Git, hand, printing press makes books. , try another tortured metaphor, Github like iTunes Git software make MP3s.go back past look old versions analysis, ’d normally visit Github find project history. Github also place can raise issues code alert team members, assign team members specific tasks, deal code conflicts /arise.Make sure personal Github account, ask Grattan staff member (e.g. James) add Grattan’s organisation-wide Github account. ’ve set LaTeX document, ’ve probably already completed steps.","code":""},{"path":"version-control.html","id":"setting-up-a-github-account-and-github-desktop","chapter":"15 Version control","heading":"15.2.1 Setting up a Github account and Github Desktop","text":"set Github account, follow steps:Go github.com click Sign .Complete sign form. can use personal (recommended) Grattan email address.37You access Github browser. need connect sync local files well. , use Github Desktop.38\ndownload use Github Desktop, follow steps:Create Github account.Go desktop.github.com download Github Desktop.Github Desktop, sign account authorise Github Desktop.asked ‘Configure Git,’ select Use Github account name email address click Finish..","code":""},{"path":"version-control.html","id":"getting-started-with-github","chapter":"15 Version control","heading":"15.2.2 Getting started with Github","text":"10-minute hello-world tutorial made people Github informative useful.\nexplains key terms used world Git – used – runss :Create use repositoryStart manage new branchMake changes file push GitHub commitsOpen merge pull requestTake time now: http://guides.github.com/activities/hello-world","code":""},{"path":"version-control.html","id":"some-git-tips","chapter":"15 Version control","heading":"15.2.3 Some Git tips","text":"Commit early, commit often\ncommitting lots small changes individually, ’ll richer history project. ’s bit like trying beat difficult level video game. mess saved often, ’ll recent place go back . save rarely, ’ll need go quite way back last savefile.\ncommitting lots small changes individually, ’ll richer history project. ’s bit like trying beat difficult level video game. mess saved often, ’ll recent place go back . save rarely, ’ll need go quite way back last savefile.Pull pushing\ncommiting changes locally, steps makes sure ’ve got --date version project machine, can see commits might conflict changes others made.\ncommiting changes locally, steps makes sure ’ve got --date version project machine, can see commits might conflict changes others made.Write meaningful, descriptive commit messages\n’ll thank later.\n’ll thank later.Use .gitignore file – shockingly! – tell Git Github ignore specific files. can useful system files, like .DS_Store .Rproj need synced project folder. can also useful large datasets (.e. 50MB).","code":""},{"path":"contributing-to-this-book.html","id":"contributing-to-this-book","chapter":"16 Contributing to this book","heading":"16 Contributing to this book","text":"Add instructions add book; see https://github.com/grattan/R_at_Grattan/issues/60.Thanks making far!\nmany, many things can R – far many cover book. , still large, world data analysis/public policy/Australia/Grattan Institute smaller. Parts otherwise-unique analysis – example, reading .csv file downloaded ABS TableBuilder – done others Grattan many times .solve annoying problem discover neat way something, future readers guide benefit greatly discovery. Everyone Grattan encouraged add , edit, book see fit.chapter provides quick explanation , exactly, can contribute book. requires knowledge R Github. ’re getting started Github,","code":""}]
